{cljs.user {:name cljs.user, :defs {}}, cljs.core {:rename-macros {}, :renames {}, :externs {setTimeout {}, process {hrtime {}}, goog {isArrayLike {}}, Java {type {}}, Object {out {println {}}, error {println {}}}}, :use-macros {}, :excludes #{}, :macros {unsafe-bit-and {:cljs.analyzer/numeric true, :arglists ([x y] [x y & more]), :line 1176, :column 1, :file "cljs/core.cljc", :name cljs.core/unsafe-bit-and, :ns cljs.core, :macro true}, macroexpand {:arglists ([quoted]), :doc "Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms.", :line 2977, :column 1, :file "cljs/core.cljc", :name cljs.core/macroexpand, :ns cljs.core, :macro true}, unchecked-remainder-int {:cljs.analyzer/numeric true, :arglists ([x n]), :line 1083, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-remainder-int, :ns cljs.core, :macro true}, when-first {:arglists ([bindings & body]), :doc "bindings => x xs\n\n  Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once", :file "clojure/core.clj", :line 4444, :column 4, :name cljs.core/when-first, :ns cljs.core, :macro true}, cond->> {:arglists ([expr & clauses]), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n  through each form for which the corresponding test expression\n  is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n  after the first true test expression.", :file "clojure/core.clj", :line 7257, :column 4, :name cljs.core/cond->>, :ns cljs.core, :macro true}, bit-set {:cljs.analyzer/numeric true, :arglists ([x n]), :line 1216, :column 1, :file "cljs/core.cljc", :name cljs.core/bit-set, :ns cljs.core, :macro true}, import-macros {:arglists ([ns [& vars]]), :line 64, :column 4, :file "cljs/core.cljc", :name cljs.core/import-macros, :ns cljs.core, :macro true}, while {:arglists ([test & body]), :doc "Repeatedly executes body while test expression is true. Presumes\n  some side-effect will cause test to become false/nil. Returns nil", :file "clojure/core.clj", :line 6087, :column 4, :name cljs.core/while, :ns cljs.core, :macro true}, satisfies? {:arglists ([psym x]), :doc "Returns true if x satisfies the protocol", :line 2092, :column 1, :file "cljs/core.cljc", :name cljs.core/satisfies?, :ns cljs.core, :macro true}, unchecked-subtract-int {:cljs.analyzer/numeric true, :arglists ([& xs]), :line 1089, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-subtract-int, :ns cljs.core, :macro true}, ns-unmap {:arglists ([quoted-ns quoted-sym]), :doc "Removes the mappings for the symbol from the namespace.", :line 2836, :column 1, :file "cljs/core.cljc", :name cljs.core/ns-unmap, :ns cljs.core, :macro true}, import {:arglists ([& import-symbols-or-lists]), :doc "import-list => (closure-namespace constructor-name-symbols*)\n\n  For each name in constructor-name-symbols, adds a mapping from name to the\n  constructor named by closure-namespace to the current namespace. Use :import in the ns\n  macro in preference to calling this directly.", :line 2940, :column 1, :file "cljs/core.cljc", :name cljs.core/import, :ns cljs.core, :macro true}, bit-shift-right {:cljs.analyzer/numeric true, :arglists ([x n]), :line 1207, :column 1, :file "cljs/core.cljc", :name cljs.core/bit-shift-right, :ns cljs.core, :macro true}, aget {:arglists ([array idx] [array idx & idxs]), :line 992, :column 1, :file "cljs/core.cljc", :name cljs.core/aget, :ns cljs.core, :macro true}, specify {:arglists ([expr & impls]), :doc "Identical to specify! but does not mutate its first argument. The first\n  argument must be an ICloneable instance.", :line 1362, :column 1, :file "cljs/core.cljc", :name cljs.core/specify, :ns cljs.core, :macro true}, vswap! {:arglists ([vol f & args]), :doc "Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in.", :line 2848, :column 1, :file "cljs/core.cljc", :name cljs.core/vswap!, :ns cljs.core, :macro true}, caching-hash {:arglists ([coll hash-fn hash-key]), :line 1228, :column 1, :file "cljs/core.cljc", :name cljs.core/caching-hash, :ns cljs.core, :macro true}, bit-shift-left {:cljs.analyzer/numeric true, :arglists ([x n]), :line 1204, :column 1, :file "cljs/core.cljc", :name cljs.core/bit-shift-left, :ns cljs.core, :macro true}, coercive-not {:arglists ([x]), :line 889, :column 1, :file "cljs/core.cljc", :name cljs.core/coercive-not, :ns cljs.core, :macro true}, dec {:cljs.analyzer/numeric true, :arglists ([x]), :line 1138, :column 1, :file "cljs/core.cljc", :name cljs.core/dec, :ns cljs.core, :macro true}, unchecked-get {:arglists ([obj key]), :doc "INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis.", :line 1019, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-get, :ns cljs.core, :macro true}, ns-publics {:arglists ([quoted-ns]), :doc "Returns a map of the public intern mappings for the namespace.", :line 2792, :column 1, :file "cljs/core.cljc", :name cljs.core/ns-publics, :ns cljs.core, :macro true}, < {:cljs.analyzer/numeric true, :arglists ([x] [x y] [x y & more]), :line 1113, :column 1, :file "cljs/core.cljc", :name cljs.core/<, :ns cljs.core, :macro true}, this-as {:arglists ([name & body]), :doc "Defines a scope where JavaScript's implicit \"this\" is bound to the name provided.", :line 1372, :column 1, :file "cljs/core.cljc", :name cljs.core/this-as, :ns cljs.core, :macro true}, .. {:arglists ([x form] [x form & more]), :doc "form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n  Expands into a member access (.) of the first member on the first\n  argument, followed by the next member on the result, etc. For\n  instance:\n\n  (.. System (getProperties) (get \"os.name\"))\n\n  expands to:\n\n  (. (. System (getProperties)) (get \"os.name\"))\n\n  but is easier to write, read, and understand.", :file "clojure/core.clj", :line 1568, :column 4, :name cljs.core/.., :ns cljs.core, :macro true}, delay {:arglists ([& body]), :doc "Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls.", :line 2130, :column 1, :file "cljs/core.cljc", :name cljs.core/delay, :ns cljs.core, :macro true}, some? {:arglists ([x]), :line 886, :column 1, :file "cljs/core.cljc", :name cljs.core/some?, :ns cljs.core, :macro true}, unchecked-negate {:cljs.analyzer/numeric true, :arglists ([x]), :line 1077, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-negate, :ns cljs.core, :macro true}, simple-benchmark {:arglists ([bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :doc "Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case.", :line 2694, :column 1, :file "cljs/core.cljc", :name cljs.core/simple-benchmark, :ns cljs.core, :macro true}, unchecked-inc-int {:cljs.analyzer/numeric true, :arglists ([x]), :line 1068, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-inc-int, :ns cljs.core, :macro true}, unchecked-set {:arglists ([obj key val]), :doc "INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis.", :line 1026, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-set, :ns cljs.core, :macro true}, js-str {:arglists ([s]), :line 2783, :column 1, :file "cljs/core.cljc", :name cljs.core/js-str, :ns cljs.core, :macro true}, bit-shift-right-zero-fill {:cljs.analyzer/numeric true, :arglists ([x n]), :line 1210, :column 1, :file "cljs/core.cljc", :name cljs.core/bit-shift-right-zero-fill, :ns cljs.core, :macro true}, implements? {:arglists ([psym x]), :doc "EXPERIMENTAL", :line 2066, :column 1, :file "cljs/core.cljc", :name cljs.core/implements?, :ns cljs.core, :macro true}, goog-define {:arglists ([sym default]), :doc "Defines a var using `goog.define`. Passed default value must be\n  string, number or boolean.\n\n  Default value can be overridden at compile time using the\n  compiler option `:closure-defines`.\n\n  Example:\n    (ns your-app.core)\n    (goog-define DEBUG! false)\n    ;; can be overridden with\n    :closure-defines {\"your_app.core.DEBUG_BANG_\" true}\n    or\n    :closure-defines {'your-app.core/DEBUG! true}", :line 729, :column 1, :file "cljs/core.cljc", :name cljs.core/goog-define, :ns cljs.core, :macro true}, pos? {:cljs.analyzer/numeric true, :arglists ([x]), :line 1147, :column 1, :file "cljs/core.cljc", :name cljs.core/pos?, :ns cljs.core, :macro true}, specify! {:arglists ([expr & impls]), :doc "Identical to reify but mutates its first argument.", :line 1354, :column 1, :file "cljs/core.cljc", :name cljs.core/specify!, :ns cljs.core, :macro true}, if-not {:arglists ([test then] [test then else]), :doc "Evaluates test. If logical false, evaluates and returns then expr, \n  otherwise else expr, if supplied, else nil.", :file "clojure/core.clj", :line 748, :column 4, :name cljs.core/if-not, :ns cljs.core, :macro true}, alength {:arglists ([a]), :line 2576, :column 1, :file "cljs/core.cljc", :name cljs.core/alength, :ns cljs.core, :macro true}, bit-xor {:cljs.analyzer/numeric true, :arglists ([x y] [x y & more]), :line 1187, :column 1, :file "cljs/core.cljc", :name cljs.core/bit-xor, :ns cljs.core, :macro true}, doseq {:arglists ([seq-exprs & body]), :doc "Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.", :line 2410, :column 1, :file "cljs/core.cljc", :name cljs.core/doseq, :ns cljs.core, :macro true}, unsigned-bit-shift-right {:cljs.analyzer/numeric true, :arglists ([x n]), :line 1213, :column 1, :file "cljs/core.cljc", :name cljs.core/unsigned-bit-shift-right, :ns cljs.core, :macro true}, neg? {:cljs.analyzer/numeric true, :arglists ([x]), :line 1150, :column 1, :file "cljs/core.cljc", :name cljs.core/neg?, :ns cljs.core, :macro true}, unchecked-float {:arglists ([x]), :line 1047, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-float, :ns cljs.core, :macro true}, undefined? {:arglists ([x]), :doc "Return true if argument is identical to the JavaScript undefined value.", :line 966, :column 1, :file "cljs/core.cljc", :name cljs.core/undefined?, :ns cljs.core, :macro true}, deftype {:arglists ([t fields & impls]), :doc "(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields", :line 1700, :column 1, :file "cljs/core.cljc", :name cljs.core/deftype, :ns cljs.core, :macro true}, mask {:arglists ([hash shift]), :line 1220, :column 1, :file "cljs/core.cljc", :name cljs.core/mask, :ns cljs.core, :macro true}, when-let {:arglists ([bindings & body]), :doc "bindings => binding-form test\n\n  When test is true, evaluates body with binding-form bound to the value of test", :file "clojure/core.clj", :line 1769, :column 4, :name cljs.core/when-let, :ns cljs.core, :macro true}, divide {:cljs.analyzer/numeric true, :arglists ([x] [x y] [x y & more]), :line 1108, :column 1, :file "cljs/core.cljc", :name cljs.core/divide, :ns cljs.core, :macro true}, coercive-boolean {:arglists ([x]), :line 898, :column 1, :file "cljs/core.cljc", :name cljs.core/coercive-boolean, :ns cljs.core, :macro true}, <= {:cljs.analyzer/numeric true, :arglists ([x] [x y] [x y & more]), :line 1118, :column 1, :file "cljs/core.cljc", :name cljs.core/<=, :ns cljs.core, :macro true}, if-some {:arglists ([bindings then] [bindings then else & oldform]), :doc "bindings => binding-form test\n\n   If test is not nil, evaluates then with binding-form bound to the\n   value of test, if not, yields else", :file "clojure/core.clj", :line 1784, :column 4, :name cljs.core/if-some, :ns cljs.core, :macro true}, * {:cljs.analyzer/numeric true, :arglists ([] [x] [x y] [x y & more]), :line 1097, :column 1, :file "cljs/core.cljc", :name cljs.core/*, :ns cljs.core, :macro true}, min {:cljs.analyzer/numeric true, :arglists ([x] [x y] [x y & more]), :line 1159, :column 1, :file "cljs/core.cljc", :name cljs.core/min, :ns cljs.core, :macro true}, lazy-seq {:arglists ([& body]), :doc "Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls.", :line 2122, :column 1, :file "cljs/core.cljc", :name cljs.core/lazy-seq, :ns cljs.core, :macro true}, js-delete {:arglists ([obj key]), :line 910, :column 1, :file "cljs/core.cljc", :name cljs.core/js-delete, :ns cljs.core, :macro true}, truth_ {:arglists ([x]), :line 903, :column 1, :file "cljs/core.cljc", :name cljs.core/truth_, :ns cljs.core, :macro true}, defcurried {:private true, :ns cljs.core, :name cljs.core/defcurried, :file "cljs/core.cljc", :column 1, :line 1246, :macro true, :arglists ([name doc meta args & body]), :doc "Builds another arity of the fn that returns a fn awaiting the last\n  param"}, js-debugger {:arglists ([]), :doc "Emit JavaScript \"debugger;\" statement", :line 916, :column 1, :file "cljs/core.cljc", :name cljs.core/js-debugger, :ns cljs.core, :macro true}, let {:arglists ([bindings & body]), :doc "binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.", :line 764, :column 1, :file "cljs/core.cljc", :name cljs.core/let, :ns cljs.core, :macro true}, -> {:arglists ([x & forms]), :doc "Threads the expr through the forms. Inserts x as the\n  second item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  second item in second form, etc.", :file "clojure/core.clj", :line 1586, :column 4, :name cljs.core/->, :ns cljs.core, :macro true}, coercive-not= {:arglists ([x y]), :line 892, :column 1, :file "cljs/core.cljc", :name cljs.core/coercive-not=, :ns cljs.core, :macro true}, doto {:arglists ([x & forms]), :doc "Evaluates x then calls all of the methods and functions with the\n  value of x supplied at the front of the given arguments.  The forms\n  are evaluated in order.  Returns x.\n\n  (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))", :file "clojure/core.clj", :line 3724, :column 4, :name cljs.core/doto, :ns cljs.core, :macro true}, areduce {:arglists ([a idx ret init expr]), :doc "Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret.", :line 2597, :column 1, :file "cljs/core.cljc", :name cljs.core/areduce, :ns cljs.core, :macro true}, double {:arglists ([x]), :line 1042, :column 1, :file "cljs/core.cljc", :name cljs.core/double, :ns cljs.core, :macro true}, bit-and-not {:cljs.analyzer/numeric true, :arglists ([x y] [x y & more]), :line 1191, :column 1, :file "cljs/core.cljc", :name cljs.core/bit-and-not, :ns cljs.core, :macro true}, unchecked-add-int {:cljs.analyzer/numeric true, :arglists ([& xs]), :line 1053, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-add-int, :ns cljs.core, :macro true}, fn {:arglists ([& sigs]), :doc "params => positional-params* , or positional-params* & next-param\n  positional-param => binding-form\n  next-param => binding-form\n  name => symbol\n\n  Defines a function", :file "clojure/core.clj", :line 4357, :column 4, :name cljs.core/fn, :ns cljs.core, :macro true}, short {:arglists ([x]), :line 1040, :column 1, :file "cljs/core.cljc", :name cljs.core/short, :ns cljs.core, :macro true}, js-this {:private true, :arglists ([]), :line 1369, :column 1, :file "cljs/core.cljc", :name cljs.core/js-this, :ns cljs.core, :macro true}, unchecked-double {:arglists ([x]), :line 1048, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-double, :ns cljs.core, :macro true}, string? {:arglists ([x]), :line 954, :column 1, :file "cljs/core.cljc", :name cljs.core/string?, :ns cljs.core, :macro true}, js-arguments {:arglists ([]), :line 907, :column 1, :file "cljs/core.cljc", :name cljs.core/js-arguments, :ns cljs.core, :macro true}, unchecked-multiply-int {:cljs.analyzer/numeric true, :arglists ([& xs]), :line 1074, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-multiply-int, :ns cljs.core, :macro true}, as-> {:arglists ([expr name & forms]), :doc "Binds name to expr, evaluates the first form in the lexical context\n  of that binding, then binds name to that result, repeating for each\n  successive form, returning the result of the last form.", :file "clojure/core.clj", :line 7274, :column 4, :name cljs.core/as->, :ns cljs.core, :macro true}, when-not {:arglists ([test & body]), :doc "Evaluates test. If logical false, evaluates body in an implicit do.", :file "clojure/core.clj", :line 499, :column 4, :name cljs.core/when-not, :ns cljs.core, :macro true}, when {:arglists ([test & body]), :doc "Evaluates test. If logical true, evaluates body in an implicit do.", :file "clojure/core.clj", :line 493, :column 4, :name cljs.core/when, :ns cljs.core, :macro true}, int {:cljs.analyzer/numeric true, :arglists ([x]), :line 1184, :column 1, :file "cljs/core.cljc", :name cljs.core/int, :ns cljs.core, :macro true}, > {:cljs.analyzer/numeric true, :arglists ([x] [x y] [x y & more]), :line 1123, :column 1, :file "cljs/core.cljc", :name cljs.core/>, :ns cljs.core, :macro true}, keyword? {:arglists ([x]), :line 989, :column 1, :file "cljs/core.cljc", :name cljs.core/keyword?, :ns cljs.core, :macro true}, use-macros {:arglists ([& args]), :doc "Similar to use but only for macros.", :line 2935, :column 1, :file "cljs/core.cljc", :name cljs.core/use-macros, :ns cljs.core, :macro true}, unchecked-multiply {:cljs.analyzer/numeric true, :arglists ([& xs]), :line 1071, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-multiply, :ns cljs.core, :macro true}, gen-apply-to {:arglists ([]), :line 2725, :column 1, :file "cljs/core.cljc", :name cljs.core/gen-apply-to, :ns cljs.core, :macro true}, some->> {:arglists ([expr & forms]), :doc "When expr is not nil, threads it into the first form (via ->>),\n  and when that result is not nil, through the next etc", :file "clojure/core.clj", :line 7300, :column 4, :name cljs.core/some->>, :ns cljs.core, :macro true}, unchecked-dec {:cljs.analyzer/numeric true, :arglists ([x]), :line 1056, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-dec, :ns cljs.core, :macro true}, defn {:doc "Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.", :arglists ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?]), :line 3147, :column 1, :file "cljs/core.cljc", :name cljs.core/defn, :ns cljs.core, :macro true}, float {:arglists ([x]), :line 1041, :column 1, :file "cljs/core.cljc", :name cljs.core/float, :ns cljs.core, :macro true}, js-in {:arglists ([key obj]), :line 913, :column 1, :file "cljs/core.cljc", :name cljs.core/js-in, :ns cljs.core, :macro true}, es6-iterable {:arglists ([ty]), :line 2786, :column 1, :file "cljs/core.cljc", :name cljs.core/es6-iterable, :ns cljs.core, :macro true}, amap {:arglists ([a idx ret expr]), :doc "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret.", :line 2581, :column 1, :file "cljs/core.cljc", :name cljs.core/amap, :ns cljs.core, :macro true}, use {:arglists ([& args]), :doc "Like require, but referring vars specified by the mandatory\n  :only option.\n\n  Example:\n\n  The following would load the library clojure.set while referring\n  the intersection var.\n\n  (use '[clojure.set :only [intersection]])", :line 2922, :column 1, :file "cljs/core.cljc", :name cljs.core/use, :ns cljs.core, :macro true}, declare {:arglists ([& names]), :doc "defs the supplied var names with no bindings, useful for making forward declarations.", :file "clojure/core.clj", :line 2667, :column 4, :name cljs.core/declare, :ns cljs.core, :macro true}, - {:cljs.analyzer/numeric true, :arglists ([x] [x y] [x y & more]), :line 1092, :column 1, :file "cljs/core.cljc", :name cljs.core/-, :ns cljs.core, :macro true}, hash-set {:arglists ([] [& xs]), :line 2533, :column 1, :file "cljs/core.cljc", :name cljs.core/hash-set, :ns cljs.core, :macro true}, or {:arglists ([] [x] [x & next]), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.", :line 864, :column 1, :file "cljs/core.cljc", :name cljs.core/or, :ns cljs.core, :macro true}, extend-type {:arglists ([type-sym & impls]), :doc "Extend a type to a series of protocols. Useful when you are\n  supplying the definitions explicitly inline. Propagates the\n  type as a type hint on the first argument of all fns.\n\n  type-sym may be\n\n   * default, meaning the definitions will apply for any value,\n     unless an extend-type exists for one of the more specific\n     cases below.\n   * nil, meaning the definitions will apply for the nil value.\n   * any of object, boolean, number, string, array, or function,\n     indicating the definitions will apply for values of the\n     associated base JavaScript types. Note that, for example,\n     string should be used instead of js/String.\n   * a JavaScript type not covered by the previous list, such\n     as js/RegExp.\n   * a type defined by deftype or defrecord.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y] ...) ...)", :line 1590, :column 1, :file "cljs/core.cljc", :name cljs.core/extend-type, :ns cljs.core, :macro true}, macroexpand-1 {:arglists ([quoted]), :doc "If form represents a macro form, returns its expansion,\n  else returns form.", :line 2966, :column 1, :file "cljs/core.cljc", :name cljs.core/macroexpand-1, :ns cljs.core, :macro true}, bit-test {:arglists ([x n]), :line 1201, :column 1, :file "cljs/core.cljc", :name cljs.core/bit-test, :ns cljs.core, :macro true}, defmethod {:arglists ([multifn dispatch-val & fn-tail]), :doc "Creates and installs a new method of multimethod associated with dispatch-value. ", :line 2679, :column 1, :file "cljs/core.cljc", :name cljs.core/defmethod, :ns cljs.core, :macro true}, time {:arglists ([expr]), :doc "Evaluates expr and prints the time it took. Returns the value of expr.", :line 2684, :column 1, :file "cljs/core.cljc", :name cljs.core/time, :ns cljs.core, :macro true}, zero? {:cljs.analyzer/numeric true, :arglists ([x]), :line 1144, :column 1, :file "cljs/core.cljc", :name cljs.core/zero?, :ns cljs.core, :macro true}, require {:arglists ([& args]), :doc "Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib or a flag that modifies how all the identified\n  libs are loaded. Use :require in the ns macro in preference to calling this\n  directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of ClojureScript code. Lib names are symbols and each lib is associated\n  with a ClojureScript namespace. A lib's name also locates its root directory\n  within classpath using Java's package name to classpath-relative path mapping.\n  All resources in a lib should be contained in the directory structure under its\n  root directory. All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root\n  resource should contain code to create the lib's namespace (usually by using\n  the ns macro) and load any additional lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :refer takes a list of symbols to refer from the namespace.\n  :refer-macros takes a list of macro symbols to refer from the namespace.\n  :include-macros true causes macros from the namespace to be required.\n  :rename specifies a map from referred var names to different\n    symbols (and can be used to prevent clashes)\n\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the library clojure.string :as string.\n\n  (require '[clojure.string :as string])", :line 2862, :column 1, :file "cljs/core.cljc", :name cljs.core/require, :ns cljs.core, :macro true}, unchecked-dec-int {:cljs.analyzer/numeric true, :arglists ([x]), :line 1059, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-dec-int, :ns cljs.core, :macro true}, memfn {:arglists ([name & args]), :doc "Expands into code that creates a fn that expects to be passed an\n  object and any args and calls the named instance method on the\n  object passing the args. Use when you want to treat a JavaScript\n  method as a first-class fn.", :line 380, :column 1, :file "cljs/core.cljc", :name cljs.core/memfn, :ns cljs.core, :macro true}, js-obj {:arglists ([& rest]), :line 2556, :column 1, :file "cljs/core.cljc", :name cljs.core/js-obj, :ns cljs.core, :macro true}, nil? {:arglists ([x]), :line 883, :column 1, :file "cljs/core.cljc", :name cljs.core/nil?, :ns cljs.core, :macro true}, extend-protocol {:arglists ([p & specs]), :doc "Useful when you want to provide several implementations of the same\n  protocol all at once. Takes a single protocol and the implementation\n  of that protocol for one or more types. Expands into calls to\n  extend-type:\n\n  (extend-protocol Protocol\n    AType\n      (foo [x] ...)\n      (bar [x y] ...)\n    BType\n      (foo [x] ...)\n      (bar [x y] ...)\n    AClass\n      (foo [x] ...)\n      (bar [x y] ...)\n    nil\n      (foo [x] ...)\n      (bar [x y] ...))\n\n  expands into:\n\n  (do\n   (clojure.core/extend-type AType Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type BType Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type AClass Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type nil Protocol \n     (foo [x] ...) \n     (bar [x y] ...)))", :file "clojure/core_deftype.clj", :line 831, :column 4, :name cljs.core/extend-protocol, :ns cljs.core, :macro true}, cond-> {:arglists ([expr & clauses]), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->)\n  through each form for which the corresponding test\n  expression is true. Note that, unlike cond branching, cond-> threading does\n  not short circuit after the first true test expression.", :file "clojure/core.clj", :line 7240, :column 4, :name cljs.core/cond->, :ns cljs.core, :macro true}, dotimes {:arglists ([bindings & body]), :doc "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.", :line 2609, :column 1, :file "cljs/core.cljc", :name cljs.core/dotimes, :ns cljs.core, :macro true}, bit-and {:cljs.analyzer/numeric true, :arglists ([x y] [x y & more]), :line 1171, :column 1, :file "cljs/core.cljc", :name cljs.core/bit-and, :ns cljs.core, :macro true}, reify {:arglists ([& impls]), :doc "reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (seq f)))))\n  == (\"f\" \"o\" \"o\"))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}", :line 1294, :column 1, :file "cljs/core.cljc", :name cljs.core/reify, :ns cljs.core, :macro true}, instance? {:arglists ([c x]), :line 974, :column 1, :file "cljs/core.cljc", :name cljs.core/instance?, :ns cljs.core, :macro true}, load-file* {:arglists ([f]), :line 2963, :column 1, :file "cljs/core.cljc", :name cljs.core/load-file*, :ns cljs.core, :macro true}, defonce {:arglists ([x init]), :doc "defs name to have the root value of init iff the named var has no root value,\n  else init is unevaluated", :line 619, :column 1, :file "cljs/core.cljc", :name cljs.core/defonce, :ns cljs.core, :macro true}, unchecked-add {:cljs.analyzer/numeric true, :arglists ([& xs]), :line 1050, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-add, :ns cljs.core, :macro true}, rfn {:private true, :ns cljs.core, :name cljs.core/rfn, :file "cljs/core.cljc", :column 1, :line 1263, :macro true, :arglists ([[f1 k] fkv]), :doc "Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl."}, identical? {:arglists ([a b]), :line 971, :column 1, :file "cljs/core.cljc", :name cljs.core/identical?, :ns cljs.core, :macro true}, unchecked-divide-int {:cljs.analyzer/numeric true, :arglists ([& xs]), :line 1062, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-divide-int, :ns cljs.core, :macro true}, defn- {:arglists ([name & decls]), :doc "same as defn, yielding non-public def", :file "clojure/core.clj", :line 4743, :column 4, :name cljs.core/defn-, :ns cljs.core, :macro true}, defprotocol {:arglists ([psym & doc+methods]), :doc "A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17", :line 1947, :column 1, :file "cljs/core.cljc", :name cljs.core/defprotocol, :ns cljs.core, :macro true}, ns-special-form {:private true, :arglists ([]), :line 2860, :column 1, :file "cljs/core.cljc", :name cljs.core/ns-special-form, :ns cljs.core, :macro true}, unchecked-subtract {:cljs.analyzer/numeric true, :arglists ([& xs]), :line 1086, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-subtract, :ns cljs.core, :macro true}, assert {:arglists ([x] [x message]), :doc "Evaluates expr and throws an exception if it does not evaluate to\n  logical true.", :line 2310, :column 1, :file "cljs/core.cljc", :name cljs.core/assert, :ns cljs.core, :macro true}, true? {:arglists ([x]), :line 948, :column 1, :file "cljs/core.cljc", :name cljs.core/true?, :ns cljs.core, :macro true}, array {:arglists ([& rest]), :line 2466, :column 1, :file "cljs/core.cljc", :name cljs.core/array, :ns cljs.core, :macro true}, letfn {:arglists ([fnspecs & body]), :doc "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n  Takes a vector of function specs and a body, and generates a set of\n  bindings of functions to their names. All of the names are available\n  in all of the definitions of the functions, as well as the body.", :file "clojure/core.clj", :line 6297, :column 4, :name cljs.core/letfn, :ns cljs.core, :macro true}, / {:cljs.analyzer/numeric true, :arglists ([x] [x y] [x y & more]), :line 1103, :column 1, :file "cljs/core.cljc", :name cljs.core//, :ns cljs.core, :macro true}, bitpos {:arglists ([hash shift]), :line 1224, :column 1, :file "cljs/core.cljc", :name cljs.core/bitpos, :ns cljs.core, :macro true}, bit-or {:cljs.analyzer/numeric true, :arglists ([x y] [x y & more]), :line 1180, :column 1, :file "cljs/core.cljc", :name cljs.core/bit-or, :ns cljs.core, :macro true}, vector {:arglists ([] [& xs]), :line 2502, :column 1, :file "cljs/core.cljc", :name cljs.core/vector, :ns cljs.core, :macro true}, >= {:cljs.analyzer/numeric true, :arglists ([x] [x y] [x y & more]), :line 1128, :column 1, :file "cljs/core.cljc", :name cljs.core/>=, :ns cljs.core, :macro true}, loop {:arglists ([bindings & body]), :doc "Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.", :line 776, :column 1, :file "cljs/core.cljc", :name cljs.core/loop, :ns cljs.core, :macro true}, bit-flip {:cljs.analyzer/numeric true, :arglists ([x n]), :line 1198, :column 1, :file "cljs/core.cljc", :name cljs.core/bit-flip, :ns cljs.core, :macro true}, js-mod {:cljs.analyzer/numeric true, :arglists ([num div]), :line 1165, :column 1, :file "cljs/core.cljc", :name cljs.core/js-mod, :ns cljs.core, :macro true}, with-out-str {:arglists ([& body]), :doc "Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls.", :line 2763, :column 1, :file "cljs/core.cljc", :name cljs.core/with-out-str, :ns cljs.core, :macro true}, condp {:added "1.0", :ns cljs.core, :name cljs.core/condp, :file "cljs/core.cljc", :column 1, :line 2173, :macro true, :arglists ([pred expr & clauses]), :doc "Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an Error is thrown."}, cond {:arglists ([& clauses]), :doc "Takes a set of test/expr pairs. It evaluates each test one at a\n  time.  If a test returns logical true, cond evaluates and returns\n  the value of the corresponding expr and doesn't evaluate any of the\n  other tests or exprs. (cond) returns nil.", :file "clojure/core.clj", :line 580, :column 4, :name cljs.core/cond, :ns cljs.core, :macro true}, some-> {:arglists ([expr & forms]), :doc "When expr is not nil, threads it into the first form (via ->),\n  and when that result is not nil, through the next etc", :file "clojure/core.clj", :line 7286, :column 4, :name cljs.core/some->, :ns cljs.core, :macro true}, ns-interns {:arglists ([quoted-ns]), :doc "Returns a map of the intern mappings for the namespace.", :line 2822, :column 1, :file "cljs/core.cljc", :name cljs.core/ns-interns, :ns cljs.core, :macro true}, for {:arglists ([seq-exprs body-expr]), :doc "List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))", :line 2323, :column 1, :file "cljs/core.cljc", :name cljs.core/for, :ns cljs.core, :macro true}, binding {:arglists ([bindings & body]), :doc "binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.", :line 2160, :column 1, :file "cljs/core.cljc", :name cljs.core/binding, :ns cljs.core, :macro true}, array-map {:arglists ([] [& kvs]), :line 2513, :column 1, :file "cljs/core.cljc", :name cljs.core/array-map, :ns cljs.core, :macro true}, unchecked-byte {:arglists ([x]), :line 1044, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-byte, :ns cljs.core, :macro true}, ns-imports {:arglists ([quoted-ns]), :doc "Returns a map of the import mappings for the namespace.", :line 2808, :column 1, :file "cljs/core.cljc", :name cljs.core/ns-imports, :ns cljs.core, :macro true}, defmacro {:arglists ([name doc-string? attr-map? [params*] body] [name doc-string? attr-map? ([params*] body) + attr-map?]), :doc "Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.", :line 3223, :column 1, :file "cljs/core.cljc", :name cljs.core/defmacro, :ns cljs.core, :macro true}, unchecked-short {:arglists ([x]), :line 1046, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-short, :ns cljs.core, :macro true}, inc {:cljs.analyzer/numeric true, :arglists ([x]), :line 1141, :column 1, :file "cljs/core.cljc", :name cljs.core/inc, :ns cljs.core, :macro true}, with-redefs {:arglists ([bindings & body]), :doc "binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing.", :line 2138, :column 1, :file "cljs/core.cljc", :name cljs.core/with-redefs, :ns cljs.core, :macro true}, bit-clear {:cljs.analyzer/numeric true, :arglists ([x n]), :line 1195, :column 1, :file "cljs/core.cljc", :name cljs.core/bit-clear, :ns cljs.core, :macro true}, locking {:arglists ([x & forms]), :line 2855, :column 1, :file "cljs/core.cljc", :name cljs.core/locking, :ns cljs.core, :macro true}, list {:arglists ([] [x] [x & xs]), :line 2493, :column 1, :file "cljs/core.cljc", :name cljs.core/list, :ns cljs.core, :macro true}, + {:cljs.analyzer/numeric true, :arglists ([] [x] [x y] [x y & more]), :line 1033, :column 1, :file "cljs/core.cljc", :name cljs.core/+, :ns cljs.core, :macro true}, aset {:arglists ([array idx val] [array idx idx2 & idxv]), :line 1005, :column 1, :file "cljs/core.cljc", :name cljs.core/aset, :ns cljs.core, :macro true}, defmulti {:arglists ([mm-name & options]), :doc "Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy", :line 2633, :column 1, :file "cljs/core.cljc", :name cljs.core/defmulti, :ns cljs.core, :macro true}, str {:arglists ([& xs]), :line 826, :column 1, :file "cljs/core.cljc", :name cljs.core/str, :ns cljs.core, :macro true}, coercive-= {:arglists ([x y]), :line 895, :column 1, :file "cljs/core.cljc", :name cljs.core/coercive-=, :ns cljs.core, :macro true}, hash-map {:arglists ([] [& kvs]), :line 2523, :column 1, :file "cljs/core.cljc", :name cljs.core/hash-map, :ns cljs.core, :macro true}, gen-apply-to-simple {:arglists ([f num-args args]), :line 2759, :column 1, :file "cljs/core.cljc", :name cljs.core/gen-apply-to-simple, :ns cljs.core, :macro true}, if-let {:arglists ([bindings then] [bindings then else & oldform]), :doc "bindings => binding-form test\n\n  If test is true, evaluates then with binding-form bound to the value of \n  test, if not, yields else", :file "clojure/core.clj", :line 1749, :column 4, :name cljs.core/if-let, :ns cljs.core, :macro true}, false? {:arglists ([x]), :line 951, :column 1, :file "cljs/core.cljc", :name cljs.core/false?, :ns cljs.core, :macro true}, case {:arglists ([e & clauses]), :doc "Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.", :line 2236, :column 1, :file "cljs/core.cljc", :name cljs.core/case, :ns cljs.core, :macro true}, exists? {:arglists ([x]), :doc "Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript.", :line 958, :column 1, :file "cljs/core.cljc", :name cljs.core/exists?, :ns cljs.core, :macro true}, bit-not {:cljs.analyzer/numeric true, :arglists ([x]), :line 1168, :column 1, :file "cljs/core.cljc", :name cljs.core/bit-not, :ns cljs.core, :macro true}, byte {:arglists ([x]), :line 1039, :column 1, :file "cljs/core.cljc", :name cljs.core/byte, :ns cljs.core, :macro true}, max {:cljs.analyzer/numeric true, :arglists ([x] [x y] [x y & more]), :line 1153, :column 1, :file "cljs/core.cljc", :name cljs.core/max, :ns cljs.core, :macro true}, == {:cljs.analyzer/numeric true, :arglists ([x] [x y] [x y & more]), :line 1133, :column 1, :file "cljs/core.cljc", :name cljs.core/==, :ns cljs.core, :macro true}, lazy-cat {:arglists ([& colls]), :doc "Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))", :line 2774, :column 1, :file "cljs/core.cljc", :name cljs.core/lazy-cat, :ns cljs.core, :macro true}, comment {:arglists ([& body]), :doc "Ignores body, yields nil", :file "clojure/core.clj", :line 4555, :column 4, :name cljs.core/comment, :ns cljs.core, :macro true}, copy-arguments {:arglists ([dest]), :line 3035, :column 1, :file "cljs/core.cljc", :name cljs.core/copy-arguments, :ns cljs.core, :macro true}, when-assert {:private true, :arglists ([x]), :line 2307, :column 1, :file "cljs/core.cljc", :name cljs.core/when-assert, :ns cljs.core, :macro true}, unsafe-cast {:arglists ([t x]), :doc "EXPERIMENTAL: Subject to change. Unsafely cast a value to a different type.", :line 937, :column 1, :file "cljs/core.cljc", :name cljs.core/unsafe-cast, :ns cljs.core, :macro true}, resolve {:arglists ([quoted-sym]), :doc "Returns the var to which a symbol will be resolved in the namespace else nil.", :line 3269, :column 1, :file "cljs/core.cljc", :name cljs.core/resolve, :ns cljs.core, :macro true}, defrecord {:arglists ([rsym fields & impls]), :doc "(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values.", :line 1878, :column 1, :file "cljs/core.cljc", :name cljs.core/defrecord, :ns cljs.core, :macro true}, make-array {:arglists ([size] [type size] [type size & more-sizes]), :line 2475, :column 1, :file "cljs/core.cljc", :name cljs.core/make-array, :ns cljs.core, :macro true}, unchecked-negate-int {:cljs.analyzer/numeric true, :arglists ([x]), :line 1080, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-negate-int, :ns cljs.core, :macro true}, unchecked-inc {:cljs.analyzer/numeric true, :arglists ([x]), :line 1065, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-inc, :ns cljs.core, :macro true}, and {:arglists ([] [x] [x & next]), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.", :line 845, :column 1, :file "cljs/core.cljc", :name cljs.core/and, :ns cljs.core, :macro true}, number? {:arglists ([x]), :line 983, :column 1, :file "cljs/core.cljc", :name cljs.core/number?, :ns cljs.core, :macro true}, js-comment {:arglists ([comment]), :doc "Emit a top-level JavaScript multi-line comment. New lines will create a\n  new comment line. Comment block will be preceded and followed by a newline", :line 923, :column 1, :file "cljs/core.cljc", :name cljs.core/js-comment, :ns cljs.core, :macro true}, symbol? {:arglists ([x]), :line 986, :column 1, :file "cljs/core.cljc", :name cljs.core/symbol?, :ns cljs.core, :macro true}, when-some {:arglists ([bindings & body]), :doc "bindings => binding-form test\n\n   When test is not nil, evaluates body with binding-form bound to the\n   value of test", :file "clojure/core.clj", :line 1804, :column 4, :name cljs.core/when-some, :ns cljs.core, :macro true}, unchecked-char {:arglists ([x]), :line 1045, :column 1, :file "cljs/core.cljc", :name cljs.core/unchecked-char, :ns cljs.core, :macro true}, require-macros {:arglists ([& args]), :doc "Similar to require but only for macros.", :line 2917, :column 1, :file "cljs/core.cljc", :name cljs.core/require-macros, :ns cljs.core, :macro true}, ->> {:arglists ([x & forms]), :doc "Threads the expr through the forms. Inserts x as the\n  last item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  last item in second form, etc.", :file "clojure/core.clj", :line 1602, :column 4, :name cljs.core/->>, :ns cljs.core, :macro true}, js-inline-comment {:arglists ([comment]), :doc "Emit an inline JavaScript comment.", :line 943, :column 1, :file "cljs/core.cljc", :name cljs.core/js-inline-comment, :ns cljs.core, :macro true}, refer-clojure {:arglists ([& args]), :doc "Refers to all the public vars of `cljs.core`, subject to\n  filters.\n  Filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  Filters can be used to select a subset, via exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent clashes.", :line 2949, :column 1, :file "cljs/core.cljc", :name cljs.core/refer-clojure, :ns cljs.core, :macro true}}, :name cljs.core, :imports {StringBuffer goog.string.StringBuffer}, :requires {gstring goog.string, goog.string goog.string, goog.Uri goog.Uri, garray goog.array, goog.object goog.object, goog.math.Integer goog.math.Integer, StringBuffer goog.string.StringBuffer, gobject goog.object, goog.array goog.array, goog.math.Long goog.math.Long}, :uses nil, :defs {->PersistentHashSet {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->PersistentHashSet, :meta {}, :method-params ([meta hash-map __hash])}, js->clj {:variadic true, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/js->clj, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params ([x]), :arglists ([x] [x & opts]), :arglists-meta (nil nil)}}, :method-params ([x])}, sort-by {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/sort-by, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([keyfn coll] [keyfn comp coll]), :arglists ([keyfn coll] [keyfn comp coll]), :arglists-meta (nil nil)}}, :method-params ([keyfn coll] [keyfn comp coll])}, ITransientAssociative {:name cljs.core/ITransientAssociative, :meta {}}, chunk-first {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/chunk-first, :meta {}, :method-params ([s])}, print-meta? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/print-meta?, :meta {}, :method-params ([opts obj])}, m3-hash-int {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/m3-hash-int, :meta {}, :method-params ([in])}, pr-str* {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/pr-str*, :meta {}, :method-params ([obj])}, eduction {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/eduction, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xforms)], :arglists ([& xforms]), :arglists-meta (nil)}}, :method-params [(xforms)]}, tree-seq {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/tree-seq, :meta {}, :method-params ([branch? children root])}, unchecked-remainder-int {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/unchecked-remainder-int, :meta {}, :method-params ([x n])}, uuid {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/uuid, :meta {}, :method-params ([s])}, seq {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/seq, :meta {}, :method-params ([coll])}, Volatile {:name cljs.core/Volatile, :meta {}}, reduce {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/reduce, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f val coll]), :arglists ([f coll] [f val coll]), :arglists-meta (nil nil)}}, :method-params ([f coll] [f val coll])}, IUUID {:name cljs.core/IUUID, :meta {}}, INIT {:name cljs.core/INIT, :meta {}}, find-ns {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/find-ns, :meta {}, :method-params ([ns])}, contains? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/contains?, :meta {}, :method-params ([coll v])}, every? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/every?, :meta {}, :method-params ([pred coll])}, ->ES6IteratorSeq {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->ES6IteratorSeq, :meta {}, :method-params ([value iter _rest])}, Var {:name cljs.core/Var, :meta {}}, keep-indexed {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/keep-indexed, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}}, :method-params ([f] [f coll])}, ->PersistentQueueSeq {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/->PersistentQueueSeq, :meta {}, :method-params ([meta front rear __hash])}, subs {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/subs, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s start] [s start end]), :arglists ([s start] [s start end]), :arglists-meta (nil nil)}}, :method-params ([s start] [s start end])}, IFind {:name cljs.core/IFind, :meta {}}, set {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/set, :meta {}, :method-params ([coll])}, MODULE_URIS {:name cljs.core/MODULE_URIS, :meta {}}, compare-indexed {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/compare-indexed, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([xs ys] [xs ys len n]), :arglists ([xs ys] [xs ys len n]), :arglists-meta (nil nil)}}, :method-params ([xs ys] [xs ys len n])}, take-last {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/take-last, :meta {}, :method-params ([n coll])}, IndexedSeq {:name cljs.core/IndexedSeq, :meta {}}, bit-set {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bit-set, :meta {}, :method-params ([x n])}, string-hash-cache-count {:name cljs.core/string-hash-cache-count, :meta {}}, qualified-keyword? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/qualified-keyword?, :meta {}, :method-params ([x])}, ->Eduction {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->Eduction, :meta {}, :method-params ([xform coll])}, tree-map-add {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/tree-map-add, :meta {}, :method-params ([comp tree k v found])}, ->ES6SetEntriesIterator {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->ES6SetEntriesIterator, :meta {}, :method-params ([s])}, -with-meta {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-with-meta, :meta {}, :method-params ([o meta])}, reset-cache {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/reset-cache, :meta {}, :method-params ([method-cache method-table cached-hierarchy hierarchy])}, ->PersistentArrayMapIterator {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->PersistentArrayMapIterator, :meta {}, :method-params ([arr i cnt])}, PersistentArrayMapIterator {:name cljs.core/PersistentArrayMapIterator, :meta {}}, butlast {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/butlast, :meta {}, :method-params ([s])}, ->t_cljs$core10724 {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->t_cljs$core10724, :meta {}, :method-params ([meta10725])}, tail-off {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/tail-off, :meta {}, :method-params ([pv])}, unchecked-subtract-int {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/unchecked-subtract-int, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, -iterator {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-iterator, :meta {}, :method-params ([coll])}, *print-namespace-maps* {:name cljs.core/*print-namespace-maps*, :meta {}}, take-nth {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/take-nth, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}}, :method-params ([n] [n coll])}, first {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/first, :meta {}, :method-params ([coll])}, native-satisfies? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/native-satisfies?, :meta {}, :method-params ([p x])}, seq? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/seq?, :meta {}, :method-params ([s])}, -global-hierarchy {:name cljs.core/-global-hierarchy, :meta {}}, UUID {:name cljs.core/UUID, :meta {}}, -sorted-seq-from {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-sorted-seq-from, :meta {}, :method-params ([coll k ascending?])}, println-str {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/println-str, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :method-params [(objs)]}, inst-ms {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/inst-ms, :meta {}, :method-params ([inst])}, linear-traversal-nth {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/linear-traversal-nth, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll n] [coll n not-found]), :arglists ([coll n] [coll n not-found]), :arglists-meta (nil nil)}}, :method-params ([coll n] [coll n not-found])}, iterate {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/iterate, :meta {}, :method-params ([f x])}, checked-aget' {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/checked-aget', :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([array idx]), :arglists ([array idx] [array idx & idxs]), :arglists-meta (nil nil)}}, :method-params ([array idx])}, -empty {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-empty, :meta {}, :method-params ([coll])}, newline {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/newline, :meta {:top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :method-params ([] [opts])}, ILookup {:name cljs.core/ILookup, :meta {}}, -chunked-rest {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-chunked-rest, :meta {}, :method-params ([coll])}, write-all {:variadic true, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/write-all, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(writer ss)], :arglists ([writer & ss]), :arglists-meta (nil)}}, :method-params [(writer ss)]}, fn? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/fn?, :meta {}, :method-params ([f])}, -prefer-method {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-prefer-method, :meta {}, :method-params ([mf dispatch-val dispatch-val-y])}, -assoc {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-assoc, :meta {}, :method-params ([coll k v])}, doall {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/doall, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [n coll]), :arglists ([coll] [n coll]), :arglists-meta (nil nil)}}, :method-params ([coll] [n coll])}, keyword-identical? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/keyword-identical?, :meta {}, :method-params ([x y])}, *print-err-fn* {:name cljs.core/*print-err-fn*, :meta {}}, pv-aset {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/pv-aset, :meta {}, :method-params ([node idx val])}, prefers {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/prefers, :meta {}, :method-params ([multifn])}, -js->clj {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-js->clj, :meta {}, :method-params ([x options])}, LazySeq {:name cljs.core/LazySeq, :meta {}}, dedupe {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/dedupe, :meta {:top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [coll]), :arglists ([] [coll]), :arglists-meta (nil nil)}}, :method-params ([] [coll])}, unchecked-editable-array-for {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/unchecked-editable-array-for, :meta {}, :method-params ([tv i])}, ->ES6Iterator {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->ES6Iterator, :meta {}, :method-params ([s])}, VectorNode {:name cljs.core/VectorNode, :meta {}}, dissoc {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/dissoc, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([coll] [coll k]), :arglists ([coll] [coll k] [coll k & ks]), :arglists-meta (nil nil nil)}}, :method-params ([coll] [coll k])}, atom {:variadic true, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/atom, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params ([x]), :arglists ([x] [x & {:keys [meta validator]}]), :arglists-meta (nil nil)}}, :method-params ([x])}, bit-shift-right {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bit-shift-right, :meta {}, :method-params ([x n])}, MapEntry {:name cljs.core/MapEntry, :meta {}}, *clojurescript-version* {:name cljs.core/*clojurescript-version*, :meta {}}, -first {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-first, :meta {}, :method-params ([coll])}, peek {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/peek, :meta {}, :method-params ([coll])}, IKVReduce {:name cljs.core/IKVReduce, :meta {}}, iter-reduce {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/iter-reduce, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll f] [coll f init]), :arglists ([coll f] [coll f init]), :arglists-meta (nil nil)}}, :method-params ([coll f] [coll f init])}, aget {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/aget, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([array idx]), :arglists ([array idx] [array idx & idxs]), :arglists-meta (nil nil)}}, :method-params ([array idx])}, PersistentTreeMapSeq {:name cljs.core/PersistentTreeMapSeq, :meta {}}, -write {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-write, :meta {}, :method-params ([writer s])}, iter {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/iter, :meta {}, :method-params ([coll])}, mk-bound-fn {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/mk-bound-fn, :meta {}, :method-params ([sc test key])}, last {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/last, :meta {}, :method-params ([s])}, -default-dispatch-val {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-default-dispatch-val, :meta {}, :method-params ([mf])}, pr {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/pr, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :method-params [(objs)]}, tree-map-seq-push {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/tree-map-seq-push, :meta {}, :method-params ([node stack ascending?])}, namespace {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/namespace, :meta {}, :method-params ([x])}, empty-unordered-hash {:name cljs.core/empty-unordered-hash, :meta {}}, obj-map {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/obj-map, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keyvals)], :arglists ([& keyvals]), :arglists-meta (nil)}}, :method-params [(keyvals)]}, Reduced {:name cljs.core/Reduced, :meta {}}, -conj {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-conj, :meta {}, :method-params ([coll o])}, NodeSeq {:name cljs.core/NodeSeq, :meta {}}, = {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/=, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, ITransientMap {:name cljs.core/ITransientMap, :meta {}}, push-tail {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/push-tail, :meta {}, :method-params ([pv level parent tailnode])}, take {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/take, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}}, :method-params ([n] [n coll])}, vector? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/vector?, :meta {}, :method-params ([x])}, array-index-of-equiv? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/array-index-of-equiv?, :meta {}, :method-params ([arr k])}, bitmap-indexed-node-index {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bitmap-indexed-node-index, :meta {}, :method-params ([bitmap bit])}, boolean {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/boolean, :meta {}, :method-params ([x])}, IChunk {:name cljs.core/IChunk, :meta {}}, bit-shift-left {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bit-shift-left, :meta {}, :method-params ([x n])}, random-uuid {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/random-uuid, :meta {}, :method-params ([])}, any? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/any?, :meta {}, :method-params ([x])}, rand-int {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/rand-int, :meta {}, :method-params ([n])}, aclone {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/aclone, :meta {}, :method-params ([arr])}, BlackNode {:name cljs.core/BlackNode, :meta {}}, vreset! {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/vreset!, :meta {}, :method-params ([vol newval])}, chunk {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/chunk, :meta {}, :method-params ([b])}, UNREALIZED-SEED {:name cljs.core/UNREALIZED-SEED, :meta {}}, dec {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/dec, :meta {}, :method-params ([x])}, ->TransformerIterator {:variadic false, :protocol-impl nil, :max-fixed-arity 6, :fn-var true, :name cljs.core/->TransformerIterator, :meta {}, :method-params ([buffer _next completed xf sourceIter multi])}, APersistentVector {:name cljs.core/APersistentVector, :meta {}}, map {:variadic true, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/map, :meta {:top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f] [f coll] [f c1 c2] [f c1 c2 c3]), :arglists ([f] [f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls]), :arglists-meta (nil nil nil nil nil)}}, :method-params ([f] [f coll] [f c1 c2] [f c1 c2 c3])}, juxt {:variadic true, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/juxt, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params ([f] [f g] [f g h]), :arglists ([f] [f g] [f g h] [f g h & fs]), :arglists-meta (nil nil nil nil)}}, :method-params ([f] [f g] [f g h])}, ->PersistentQueueIter {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->PersistentQueueIter, :meta {}, :method-params ([fseq riter])}, < {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/<, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, *eval* {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/*eval*, :meta {}, :method-params ([_])}, inode-kv-reduce {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/inode-kv-reduce, :meta {}, :method-params ([arr f init])}, obj-map->hash-map {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/obj-map->hash-map, :meta {}, :method-params ([m k v])}, test {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/test, :meta {}, :method-params ([v])}, rest {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/rest, :meta {}, :method-params ([coll])}, ex-data {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/ex-data, :meta {}, :method-params ([ex])}, PersistentArrayMapSeq {:name cljs.core/PersistentArrayMapSeq, :meta {}}, -drop-first {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-drop-first, :meta {}, :method-params ([coll])}, isa? {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/isa?, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([child parent] [h child parent]), :arglists ([child parent] [h child parent]), :arglists-meta (nil nil)}}, :method-params ([child parent] [h child parent])}, boolean? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/boolean?, :meta {}, :method-params ([x])}, -clone {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-clone, :meta {}, :method-params ([value])}, munge {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/munge, :meta {}, :method-params ([name])}, empty-ordered-hash {:name cljs.core/empty-ordered-hash, :meta {}}, DEMUNGE_MAP {:name cljs.core/DEMUNGE_MAP, :meta {}}, ES6IteratorSeq {:name cljs.core/ES6IteratorSeq, :meta {}}, ->NeverEquiv {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/->NeverEquiv, :meta {}, :method-params ([])}, re-seq {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/re-seq, :meta {}, :method-params ([re s])}, char? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/char?, :meta {}, :method-params ([x])}, make-hierarchy {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/make-hierarchy, :meta {}, :method-params ([])}, Symbol {:name cljs.core/Symbol, :meta {}}, PROTOCOL_SENTINEL {:name cljs.core/PROTOCOL_SENTINEL, :meta {}}, tv-push-tail {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/tv-push-tail, :meta {}, :method-params ([tv level parent tail-node])}, -reduce {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-reduce, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll f] [coll f start]), :arglists ([coll f] [coll f start]), :arglists-meta (nil nil)}}, :method-params ([coll f] [coll f start])}, -count {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-count, :meta {}, :method-params ([coll])}, swap-vals! {:variadic true, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/swap-vals!, :meta {:top-fn {:variadic true, :max-fixed-arity 4, :method-params ([a f] [a f x] [a f x y]), :arglists ([a f] [a f x] [a f x y] [a f x y & more]), :arglists-meta (nil nil nil nil)}}, :method-params ([a f] [a f x] [a f x y])}, keep {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/keep, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}}, :method-params ([f] [f coll])}, char {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/char, :meta {}, :method-params ([x])}, mapcat {:variadic true, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/mapcat, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params ([f]), :arglists ([f] [f & colls]), :arglists-meta (nil nil)}}, :method-params ([f])}, unchecked-long {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-long, :meta {}, :method-params ([x])}, m3-seed {:name cljs.core/m3-seed, :meta {}}, some? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/some?, :meta {}, :method-params ([x])}, unchecked-negate {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-negate, :meta {}, :method-params ([x])}, remove-tap {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/remove-tap, :meta {}, :method-params ([f])}, symbol-identical? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/symbol-identical?, :meta {}, :method-params ([x y])}, *command-line-args* {:name cljs.core/*command-line-args*, :meta {}}, reverse {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/reverse, :meta {}, :method-params ([coll])}, inst? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/inst?, :meta {}, :method-params ([x])}, range {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/range, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([] [end] [start end] [start end step]), :arglists ([] [end] [start end] [start end step]), :arglists-meta (nil nil nil nil)}}, :method-params ([] [end] [start end] [start end step])}, bit-count {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/bit-count, :meta {}, :method-params ([v])}, create-node {:variadic false, :protocol-impl nil, :max-fixed-arity 7, :fn-var true, :name cljs.core/create-node, :meta {:top-fn {:variadic false, :max-fixed-arity 7, :method-params ([shift key1 val1 key2hash key2 val2] [edit shift key1 val1 key2hash key2 val2]), :arglists ([shift key1 val1 key2hash key2 val2] [edit shift key1 val1 key2hash key2 val2]), :arglists-meta (nil nil)}}, :method-params ([shift key1 val1 key2hash key2 val2] [edit shift key1 val1 key2hash key2 val2])}, sort {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/sort, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [comp coll]), :arglists ([coll] [comp coll]), :arglists-meta (nil nil)}}, :method-params ([coll] [comp coll])}, ->MetaFn {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->MetaFn, :meta {}, :method-params ([afn meta])}, unchecked-inc-int {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-inc-int, :meta {}, :method-params ([x])}, -compare {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-compare, :meta {}, :method-params ([x y])}, map-indexed {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/map-indexed, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}}, :method-params ([f] [f coll])}, array-list {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/array-list, :meta {}, :method-params ([])}, rand-nth {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/rand-nth, :meta {}, :method-params ([coll])}, comp {:variadic true, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/comp, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params ([] [f] [f g] [f g h]), :arglists ([] [f] [f g] [f g h] [f1 f2 f3 & fs]), :arglists-meta (nil nil nil nil nil)}}, :method-params ([] [f] [f g] [f g h])}, array-chunk {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/array-chunk, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([arr] [arr off] [arr off end]), :arglists ([arr] [arr off] [arr off end]), :arglists-meta (nil nil nil)}}, :method-params ([arr] [arr off] [arr off end])}, dispatch-fn {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/dispatch-fn, :meta {}, :method-params ([multifn])}, bit-shift-right-zero-fill {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bit-shift-right-zero-fill, :meta {}, :method-params ([x n])}, js-reserved? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/js-reserved?, :meta {}, :method-params ([x])}, -as-transient {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-as-transient, :meta {}, :method-params ([coll])}, dorun {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/dorun, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [n coll]), :arglists ([coll] [n coll]), :arglists-meta (nil nil)}}, :method-params ([coll] [n coll])}, pr-sequential-writer {:variadic false, :protocol-impl nil, :max-fixed-arity 7, :fn-var true, :name cljs.core/pr-sequential-writer, :meta {}, :method-params ([writer print-one begin sep end opts coll])}, simple-symbol? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/simple-symbol?, :meta {}, :method-params ([x])}, accumulating-seq-count {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/accumulating-seq-count, :meta {}, :method-params ([coll])}, IIndexed {:name cljs.core/IIndexed, :meta {}}, disj {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/disj, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([coll] [coll k]), :arglists ([coll] [coll k] [coll k & ks]), :arglists-meta (nil nil nil)}}, :method-params ([coll] [coll k])}, MultiIterator {:name cljs.core/MultiIterator, :meta {}}, IPrintWithWriter {:name cljs.core/IPrintWithWriter, :meta {}}, ->UUID {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->UUID, :meta {}, :method-params ([uuid __hash])}, IVector {:name cljs.core/IVector, :meta {}}, IIterable {:name cljs.core/IIterable, :meta {}}, ->MultiIterator {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->MultiIterator, :meta {}, :method-params ([iters])}, *2 {:name cljs.core/*2, :meta {}}, eval {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/eval, :meta {}, :method-params ([form])}, Eduction {:name cljs.core/Eduction, :meta {}}, pv-clone-node {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/pv-clone-node, :meta {}, :method-params ([node])}, cons {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/cons, :meta {}, :method-params ([x coll])}, PersistentTreeSet {:name cljs.core/PersistentTreeSet, :meta {}}, ->HashSetIter {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->HashSetIter, :meta {}, :method-params ([iter])}, ns-lookup {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/ns-lookup, :meta {}, :method-params ([ns-obj k])}, floats {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/floats, :meta {}, :method-params ([x])}, TransientVector {:name cljs.core/TransientVector, :meta {}}, pos? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/pos?, :meta {}, :method-params ([x])}, fnil {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/fnil, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([f x] [f x y] [f x y z]), :arglists ([f x] [f x y] [f x y z]), :arglists-meta (nil nil nil)}}, :method-params ([f x] [f x y] [f x y z])}, merge-with {:variadic true, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/merge-with, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f maps)], :arglists ([f & maps]), :arglists-meta (nil)}}, :method-params [(f maps)]}, nthrest {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/nthrest, :meta {}, :method-params ([coll n])}, *warn-on-infer* {:name cljs.core/*warn-on-infer*, :meta {}}, -find {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-find, :meta {}, :method-params ([coll k])}, sequential? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/sequential?, :meta {}, :method-params ([x])}, tree-map-replace {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/tree-map-replace, :meta {}, :method-params ([comp tree k v])}, checked-aset' {:variadic true, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/checked-aset', :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params ([array idx val]), :arglists ([array idx val] [array idx idx2 & idxv]), :arglists-meta (nil nil)}}, :method-params ([array idx val])}, m3-mix-H1 {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/m3-mix-H1, :meta {}, :method-params ([h1 k1])}, RecordIter {:name cljs.core/RecordIter, :meta {}}, ->TransientArrayMap {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->TransientArrayMap, :meta {}, :method-params ([editable? len arr])}, prim-seq {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/prim-seq, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([prim] [prim i]), :arglists ([prim] [prim i]), :arglists-meta (nil nil)}}, :method-params ([prim] [prim i])}, *print-level* {:name cljs.core/*print-level*, :meta {}}, shuffle {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/shuffle, :meta {}, :method-params ([coll])}, ChunkedSeq {:name cljs.core/ChunkedSeq, :meta {}}, hash-keyword {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/hash-keyword, :meta {}, :method-params ([k])}, find {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/find, :meta {}, :method-params ([coll k])}, alength {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/alength, :meta {}, :method-params ([array])}, bit-xor {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bit-xor, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}}, :method-params ([x y])}, ->IndexedSeq {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->IndexedSeq, :meta {}, :method-params ([arr i meta])}, ObjMap {:name cljs.core/ObjMap, :meta {}}, unsigned-bit-shift-right {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/unsigned-bit-shift-right, :meta {}, :method-params ([x n])}, t_cljs$core10724 {:name cljs.core/t_cljs$core10724, :meta {}}, ES6SetEntriesIterator {:name cljs.core/ES6SetEntriesIterator, :meta {}}, neg? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/neg?, :meta {}, :method-params ([x])}, Cons {:name cljs.core/Cons, :meta {}}, -remove-method {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-remove-method, :meta {}, :method-params ([mf dispatch-val])}, ->StringIter {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->StringIter, :meta {}, :method-params ([s i])}, js-invoke {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/js-invoke, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(obj s args)], :arglists ([obj s & args]), :arglists-meta (nil)}}, :method-params [(obj s args)]}, ->List {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->List, :meta {}, :method-params ([meta first rest count __hash])}, m3-mix-K1 {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/m3-mix-K1, :meta {}, :method-params ([k1])}, Iterate {:name cljs.core/Iterate, :meta {}}, unchecked-float {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-float, :meta {}, :method-params ([x])}, undefined? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/undefined?, :meta {}, :method-params ([x])}, IMeta {:name cljs.core/IMeta, :meta {}}, reduced? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/reduced?, :meta {}, :method-params ([r])}, apply-to {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/apply-to, :meta {}, :method-params ([f argc args])}, disj! {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/disj!, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([tcoll val]), :arglists ([tcoll val] [tcoll val & vals]), :arglists-meta (nil nil)}}, :method-params ([tcoll val])}, -lookup {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-lookup, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([o k] [o k not-found]), :arglists ([o k] [o k not-found]), :arglists-meta (nil nil)}}, :method-params ([o k] [o k not-found])}, float? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/float?, :meta {}, :method-params ([x])}, ICloneable {:name cljs.core/ICloneable, :meta {}}, IEncodeClojure {:name cljs.core/IEncodeClojure, :meta {}}, booleans {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/booleans, :meta {}, :method-params ([x])}, ->ArrayList {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->ArrayList, :meta {}, :method-params ([arr])}, RSeq {:name cljs.core/RSeq, :meta {}}, mask {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/mask, :meta {}, :method-params ([hash shift])}, int-array {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/int-array, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size-or-seq] [size init-val-or-seq]), :arglists ([size-or-seq] [size init-val-or-seq]), :arglists-meta (nil nil)}}, :method-params ([size-or-seq] [size init-val-or-seq])}, find-and-cache-best-method {:variadic false, :protocol-impl nil, :max-fixed-arity 8, :fn-var true, :name cljs.core/find-and-cache-best-method, :meta {}, :method-params ([name dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy default-dispatch-val])}, set? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/set?, :meta {}, :method-params ([x])}, iterable? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/iterable?, :meta {}, :method-params ([x])}, cat {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/cat, :meta {}, :method-params ([rf])}, ->ES6EntriesIterator {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->ES6EntriesIterator, :meta {}, :method-params ([s])}, divide {:name cljs.core/divide, :meta {}}, js-reserved-arr {:name cljs.core/js-reserved-arr, :meta {}}, -pr-writer {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-pr-writer, :meta {}, :method-params ([o writer opts])}, flush {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/flush, :meta {}, :method-params ([])}, set-from-indexed-seq {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/set-from-indexed-seq, :meta {}, :method-params ([iseq])}, maybe-init-tapset {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/maybe-init-tapset, :meta {}, :method-params ([])}, take-while {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/take-while, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}}, :method-params ([pred] [pred coll])}, vary-meta {:variadic true, :protocol-impl nil, :max-fixed-arity 6, :fn-var true, :name cljs.core/vary-meta, :meta {:top-fn {:variadic true, :max-fixed-arity 6, :method-params ([obj f] [obj f a] [obj f a b] [obj f a b c] [obj f a b c d]), :arglists ([obj f] [obj f a] [obj f a b] [obj f a b c] [obj f a b c d] [obj f a b c d & args]), :arglists-meta (nil nil nil nil nil nil)}}, :method-params ([obj f] [obj f a] [obj f a b] [obj f a b c] [obj f a b c d])}, INext {:name cljs.core/INext, :meta {}}, is_proto_ {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/is_proto_, :meta {}, :method-params ([x])}, START {:name cljs.core/START, :meta {}}, ICounted {:name cljs.core/ICounted, :meta {}}, IMapEntry {:name cljs.core/IMapEntry, :meta {}}, pv-reduce {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/pv-reduce, :meta {:top-fn {:variadic false, :max-fixed-arity 5, :method-params ([pv f start end] [pv f init start end]), :arglists ([pv f start end] [pv f init start end]), :arglists-meta (nil nil)}}, :method-params ([pv f start end] [pv f init start end])}, <= {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/<=, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, MODULE_INFOS {:name cljs.core/MODULE_INFOS, :meta {}}, conj! {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/conj!, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [tcoll] [tcoll val]), :arglists ([] [tcoll] [tcoll val] [tcoll val & vals]), :arglists-meta (nil nil nil nil)}}, :method-params ([] [tcoll] [tcoll val])}, -pop {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-pop, :meta {}, :method-params ([coll])}, array-index-of-identical? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/array-index-of-identical?, :meta {}, :method-params ([arr k])}, repeatedly {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/repeatedly, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [n f]), :arglists ([f] [n f]), :arglists-meta (nil nil)}}, :method-params ([f] [n f])}, zipmap {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/zipmap, :meta {}, :method-params ([keys vals])}, reset-vals! {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/reset-vals!, :meta {}, :method-params ([a new-value])}, IStack {:name cljs.core/IStack, :meta {}}, -remove-watch {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-remove-watch, :meta {}, :method-params ([this key])}, IVolatile {:name cljs.core/IVolatile, :meta {}}, remove {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/remove, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}}, :method-params ([pred] [pred coll])}, ->BitmapIndexedNode {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->BitmapIndexedNode, :meta {}, :method-params ([edit bitmap arr])}, * {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/*, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :method-params ([] [x] [x y])}, re-pattern {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/re-pattern, :meta {}, :method-params ([s])}, min {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/min, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, array-index-of-nil? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/array-index-of-nil?, :meta {}, :method-params ([arr])}, -persistent! {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-persistent!, :meta {}, :method-params ([tcoll])}, -nth {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-nth, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll n] [coll n not-found]), :arglists ([coll n] [coll n not-found]), :arglists-meta (nil nil)}}, :method-params ([coll n] [coll n not-found])}, pop! {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/pop!, :meta {}, :method-params ([tcoll])}, chunk-append {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/chunk-append, :meta {}, :method-params ([b x])}, *unchecked-arrays* {:name cljs.core/*unchecked-arrays*, :meta {}}, prn-str {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/prn-str, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :method-params [(objs)]}, IReversible {:name cljs.core/IReversible, :meta {}}, reversible? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/reversible?, :meta {}, :method-params ([coll])}, -realized? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-realized?, :meta {}, :method-params ([x])}, -add-watch {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-add-watch, :meta {}, :method-params ([this key f])}, -deref-with-timeout {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-deref-with-timeout, :meta {}, :method-params ([o msec timeout-val])}, conj {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/conj, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [coll] [coll x]), :arglists ([] [coll] [coll x] [coll x & xs]), :arglists-meta (nil nil nil nil)}}, :method-params ([] [coll] [coll x])}, -sorted-seq {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-sorted-seq, :meta {}, :method-params ([coll ascending?])}, flatten1 {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/flatten1, :meta {}, :method-params ([colls])}, transduce {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/transduce, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([xform f coll] [xform f init coll]), :arglists ([xform f coll] [xform f init coll]), :arglists-meta (nil nil)}}, :method-params ([xform f coll] [xform f init coll])}, -swap! {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/-swap!, :meta {:top-fn {:variadic false, :max-fixed-arity 5, :method-params ([o f] [o f a] [o f a b] [o f a b xs]), :arglists ([o f] [o f a] [o f a b] [o f a b xs]), :arglists-meta (nil nil nil nil)}}, :method-params ([o f] [o f a] [o f a b] [o f a b xs])}, *print-length* {:name cljs.core/*print-length*, :meta {}}, js-delete {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/js-delete, :meta {}, :method-params ([obj key])}, truth_ {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/truth_, :meta {}, :method-params ([x])}, array-index-of {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/array-index-of, :meta {}, :method-params ([arr k])}, ->MultiFn {:variadic false, :protocol-impl nil, :max-fixed-arity 8, :fn-var true, :name cljs.core/->MultiFn, :meta {}, :method-params ([name dispatch-fn default-dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy])}, key->js {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/key->js, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([k] [k primitive-fn]), :arglists ([k] [k primitive-fn]), :arglists-meta (nil nil)}}, :method-params ([k] [k primitive-fn])}, IEncodeJS {:name cljs.core/IEncodeJS, :meta {}}, new-path {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/new-path, :meta {}, :method-params ([edit level node])}, compare-and-set! {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/compare-and-set!, :meta {}, :method-params ([a oldval newval])}, array-seq {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/array-seq, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([array] [array i]), :arglists ([array] [array i]), :arglists-meta (nil nil)}}, :method-params ([array] [array i])}, array-copy-downward {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/array-copy-downward, :meta {}, :method-params ([from i to j len])}, pack-array-node {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/pack-array-node, :meta {}, :method-params ([array-node edit idx])}, interleave {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/interleave, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [c1] [c1 c2]), :arglists ([] [c1] [c1 c2] [c1 c2 & colls]), :arglists-meta (nil nil nil nil)}}, :method-params ([] [c1] [c1 c2])}, print-map {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/print-map, :meta {}, :method-params ([m print-one writer opts])}, map? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/map?, :meta {}, :method-params ([x])}, m3-C1 {:name cljs.core/m3-C1, :meta {}}, get {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/get, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([o k] [o k not-found]), :arglists ([o k] [o k not-found]), :arglists-meta (nil nil)}}, :method-params ([o k] [o k not-found])}, identity {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/identity, :meta {}, :method-params ([x])}, into {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/into, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([] [to] [to from] [to xform from]), :arglists ([] [to] [to from] [to xform from]), :arglists-meta (nil nil nil nil)}}, :method-params ([] [to] [to from] [to xform from])}, long {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/long, :meta {}, :method-params ([x])}, double {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/double, :meta {}, :method-params ([x])}, volatile? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/volatile?, :meta {}, :method-params ([x])}, ChunkBuffer {:name cljs.core/ChunkBuffer, :meta {}}, HashSetIter {:name cljs.core/HashSetIter, :meta {}}, -key {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-key, :meta {}, :method-params ([coll])}, nfirst {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/nfirst, :meta {}, :method-params ([coll])}, StringBufferWriter {:name cljs.core/StringBufferWriter, :meta {}}, meta {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/meta, :meta {}, :method-params ([o])}, tv-editable-tail {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/tv-editable-tail, :meta {}, :method-params ([tl])}, -kv-reduce {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-kv-reduce, :meta {}, :method-params ([coll f init])}, IHash {:name cljs.core/IHash, :meta {}}, bit-and-not {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bit-and-not, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}}, :method-params ([x y])}, var? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/var?, :meta {}, :method-params ([v])}, -comparator {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-comparator, :meta {}, :method-params ([coll])}, unchecked-add-int {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/unchecked-add-int, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :method-params ([] [x] [x y])}, hash-ordered-coll {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/hash-ordered-coll, :meta {}, :method-params ([coll])}, extend-object! {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/extend-object!, :meta {}, :method-params ([obj fn-map])}, do-assoc {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/do-assoc, :meta {}, :method-params ([pv level node i val])}, reset-meta! {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/reset-meta!, :meta {}, :method-params ([iref m])}, ->KeySeq {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->KeySeq, :meta {}, :method-params ([mseq _meta])}, IEquiv {:name cljs.core/IEquiv, :meta {}}, tree-map-kv-reduce {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/tree-map-kv-reduce, :meta {}, :method-params ([node f init])}, cycle {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/cycle, :meta {}, :method-params ([coll])}, -deref {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-deref, :meta {}, :method-params ([o])}, pr-writer-ex-info {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/pr-writer-ex-info, :meta {}, :method-params ([obj writer opts])}, empty? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/empty?, :meta {}, :method-params ([coll])}, TaggedLiteral {:name cljs.core/TaggedLiteral, :meta {}}, short {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/short, :meta {}, :method-params ([x])}, -clj->js {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-clj->js, :meta {}, :method-params ([x])}, -chunked-first {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-chunked-first, :meta {}, :method-params ([coll])}, add-tap {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/add-tap, :meta {}, :method-params ([f])}, filterv {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/filterv, :meta {}, :method-params ([pred coll])}, ->TaggedLiteral {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->TaggedLiteral, :meta {}, :method-params ([tag form])}, tv-editable-root {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/tv-editable-root, :meta {}, :method-params ([node])}, hash {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/hash, :meta {}, :method-params ([o])}, quot {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/quot, :meta {}, :method-params ([n d])}, ns-interns* {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/ns-interns*, :meta {}, :method-params ([sym])}, unchecked-double {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-double, :meta {}, :method-params ([x])}, *target* {:name cljs.core/*target*, :meta {}}, ->ChunkedCons {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/->ChunkedCons, :meta {}, :method-params ([chunk more meta __hash])}, ranged-iterator {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/ranged-iterator, :meta {}, :method-params ([v start end])}, ITransientVector {:name cljs.core/ITransientVector, :meta {}}, key {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/key, :meta {}, :method-params ([map-entry])}, longs {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/longs, :meta {}, :method-params ([x])}, not= {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/not=, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, set-print-err-fn! {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/set-print-err-fn!, :meta {}, :method-params ([f])}, string? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/string?, :meta {}, :method-params ([x])}, uri? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/uri?, :meta {}, :method-params ([x])}, es6-iterator {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/es6-iterator, :meta {}, :method-params ([coll])}, Delay {:name cljs.core/Delay, :meta {}}, munge-str {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/munge-str, :meta {}, :method-params ([name])}, pr-str-with-opts {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/pr-str-with-opts, :meta {}, :method-params ([objs opts])}, ->RecordIter {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->RecordIter, :meta {}, :method-params ([i record base-count fields ext-map-iter])}, m3-C2 {:name cljs.core/m3-C2, :meta {}}, ->Symbol {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->Symbol, :meta {}, :method-params ([ns name str _hash _meta])}, *print-newline* {:name cljs.core/*print-newline*, :meta {}}, unchecked-multiply-int {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/unchecked-multiply-int, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :method-params ([] [x] [x y])}, tapset {:name cljs.core/tapset, :meta {}}, chunk-rest {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/chunk-rest, :meta {}, :method-params ([s])}, remove-all-methods {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/remove-all-methods, :meta {}, :method-params ([multifn])}, trampoline {:variadic true, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/trampoline, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params ([f]), :arglists ([f] [f & args]), :arglists-meta (nil nil)}}, :method-params ([f])}, double? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/double?, :meta {}, :method-params ([x])}, pr-opts {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/pr-opts, :meta {}, :method-params ([])}, *1 {:name cljs.core/*1, :meta {}}, vec {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/vec, :meta {}, :method-params ([coll])}, ->Cycle {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->Cycle, :meta {}, :method-params ([meta all prev current _next])}, *print-meta* {:name cljs.core/*print-meta*, :meta {}}, -notify-watches {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-notify-watches, :meta {}, :method-params ([this oldval newval])}, MultiFn {:name cljs.core/MultiFn, :meta {}}, NONE {:name cljs.core/NONE, :meta {}}, int {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/int, :meta {}, :method-params ([x])}, ->ValSeq {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->ValSeq, :meta {}, :method-params ([mseq _meta])}, map-entry? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/map-entry?, :meta {}, :method-params ([x])}, rand {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/rand, :meta {:top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :method-params ([] [n])}, second {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/second, :meta {}, :method-params ([coll])}, find-ns-obj {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/find-ns-obj, :meta {}, :method-params ([ns])}, IEditableCollection {:name cljs.core/IEditableCollection, :meta {}}, hash-combine {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/hash-combine, :meta {}, :method-params ([seed hash])}, > {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/>, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, -name {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-name, :meta {}, :method-params ([x])}, replace {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/replace, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([smap] [smap coll]), :arglists ([smap] [smap coll]), :arglists-meta (nil nil)}}, :method-params ([smap] [smap coll])}, int? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/int?, :meta {}, :method-params ([x])}, ->Subvec {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->Subvec, :meta {}, :method-params ([meta v start end __hash])}, associative? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/associative?, :meta {}, :method-params ([x])}, unchecked-int {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-int, :meta {}, :method-params ([x])}, js-keys {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/js-keys, :meta {}, :method-params ([obj])}, inst-ms* {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/inst-ms*, :meta {}, :method-params ([inst])}, ES6EntriesIterator {:name cljs.core/ES6EntriesIterator, :meta {}}, keyword? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/keyword?, :meta {}, :method-params ([x])}, array-iter {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/array-iter, :meta {}, :method-params ([x])}, force {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/force, :meta {}, :method-params ([x])}, group-by {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/group-by, :meta {}, :method-params ([f coll])}, -rseq {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-rseq, :meta {}, :method-params ([coll])}, prn {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/prn, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :method-params [(objs)]}, tv-pop-tail {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/tv-pop-tail, :meta {}, :method-params ([tv level node])}, default-dispatch-val {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/default-dispatch-val, :meta {}, :method-params ([multifn])}, ->Atom {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/->Atom, :meta {}, :method-params ([state meta validator watches])}, PersistentHashMap {:name cljs.core/PersistentHashMap, :meta {}}, unchecked-multiply {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/unchecked-multiply, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :method-params ([] [x] [x y])}, ArrayNodeSeq {:name cljs.core/ArrayNodeSeq, :meta {}}, even? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/even?, :meta {}, :method-params ([n])}, es6-iterator-seq {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/es6-iterator-seq, :meta {}, :method-params ([iter])}, unchecked-dec {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-dec, :meta {}, :method-params ([x])}, Inst {:name cljs.core/Inst, :meta {}}, hash-collision-node-find-index {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/hash-collision-node-find-index, :meta {}, :method-params ([arr cnt key])}, persistent-array-map-seq {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/persistent-array-map-seq, :meta {}, :method-params ([arr i _meta])}, RangeIterator {:name cljs.core/RangeIterator, :meta {}}, tagged-literal? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/tagged-literal?, :meta {}, :method-params ([value])}, double-array {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/double-array, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size-or-seq] [size init-val-or-seq]), :arglists ([size-or-seq] [size init-val-or-seq]), :arglists-meta (nil nil)}}, :method-params ([size-or-seq] [size init-val-or-seq])}, create-ns {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/create-ns, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([sym] [sym ns-obj]), :arglists ([sym] [sym ns-obj]), :arglists-meta (nil nil)}}, :method-params ([sym] [sym ns-obj])}, ->EmptyList {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->EmptyList, :meta {}, :method-params ([meta])}, seq-reduce {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/seq-reduce, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f val coll]), :arglists ([f coll] [f val coll]), :arglists-meta (nil nil)}}, :method-params ([f coll] [f val coll])}, spread {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/spread, :meta {}, :method-params ([arglist])}, balance-left {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/balance-left, :meta {}, :method-params ([key val ins right])}, rseq {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/rseq, :meta {}, :method-params ([rev])}, ex-cause {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/ex-cause, :meta {}, :method-params ([ex])}, IReset {:name cljs.core/IReset, :meta {}}, IEmptyableCollection {:name cljs.core/IEmptyableCollection, :meta {}}, array-map-index-of {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/array-map-index-of, :meta {}, :method-params ([m k])}, ex-message {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/ex-message, :meta {}, :method-params ([ex])}, ->NodeIterator {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/->NodeIterator, :meta {}, :method-params ([arr i next-entry next-iter])}, *print-fn-bodies* {:name cljs.core/*print-fn-bodies*, :meta {}}, string-print {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/string-print, :meta {}, :method-params ([x])}, float {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/float, :meta {}, :method-params ([x])}, IRecord {:name cljs.core/IRecord, :meta {}}, pr-str {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/pr-str, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :method-params [(objs)]}, first-array-for-longvec {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/first-array-for-longvec, :meta {}, :method-params ([pv])}, es6-set-entries-iterator {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/es6-set-entries-iterator, :meta {}, :method-params ([coll])}, concat {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/concat, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & zs]), :arglists-meta (nil nil nil nil)}}, :method-params ([] [x] [x y])}, -methods {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-methods, :meta {}, :method-params ([mf])}, js-reserved {:name cljs.core/js-reserved, :meta {}}, IDerefWithTimeout {:name cljs.core/IDerefWithTimeout, :meta {}}, symbol {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/symbol, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([name] [ns name]), :arglists ([name] [ns name]), :arglists-meta (nil nil)}}, :method-params ([name] [ns name])}, to-array-2d {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/to-array-2d, :meta {}, :method-params ([coll])}, Subvec {:name cljs.core/Subvec, :meta {}}, ExceptionInfo {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/ExceptionInfo, :meta {}, :method-params ([message data cause])}, mod {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/mod, :meta {}, :method-params ([n d])}, ISet {:name cljs.core/ISet, :meta {}}, pop {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/pop, :meta {}, :method-params ([coll])}, IPending {:name cljs.core/IPending, :meta {}}, -entry-key {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-entry-key, :meta {}, :method-params ([coll entry])}, CHAR_MAP {:name cljs.core/CHAR_MAP, :meta {}}, pop-tail {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/pop-tail, :meta {}, :method-params ([pv level node])}, dissoc! {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/dissoc!, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([tcoll key]), :arglists ([tcoll key] [tcoll key & ks]), :arglists-meta (nil nil)}}, :method-params ([tcoll key])}, reductions {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/reductions, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f init coll]), :arglists ([f coll] [f init coll]), :arglists-meta (nil nil)}}, :method-params ([f coll] [f init coll])}, indexed? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/indexed?, :meta {}, :method-params ([x])}, - {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, Cycle {:name cljs.core/Cycle, :meta {}}, -equiv {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-equiv, :meta {}, :method-params ([o other])}, ->RangeIterator {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->RangeIterator, :meta {}, :method-params ([i end step])}, ->ArrayNode {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->ArrayNode, :meta {}, :method-params ([edit cnt arr])}, assoc! {:variadic true, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/assoc!, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params ([tcoll key val]), :arglists ([tcoll key val] [tcoll key val & kvs]), :arglists-meta (nil nil)}}, :method-params ([tcoll key val])}, hash-set {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/hash-set, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params ([]), :arglists ([] [& keys]), :arglists-meta (nil nil)}}, :method-params ([])}, reduce-kv {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/reduce-kv, :meta {}, :method-params ([f init coll])}, reset! {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/reset!, :meta {}, :method-params ([a new-value])}, name {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/name, :meta {}, :method-params ([x])}, ->RedNode {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->RedNode, :meta {}, :method-params ([key val left right __hash])}, unchecked-array-for {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/unchecked-array-for, :meta {}, :method-params ([pv i])}, Fn {:name cljs.core/Fn, :meta {}}, ffirst {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/ffirst, :meta {}, :method-params ([coll])}, ->ArrayNodeIterator {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->ArrayNodeIterator, :meta {}, :method-params ([arr i next-iter])}, sorted-set {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/sorted-set, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keys)], :arglists ([& keys]), :arglists-meta (nil)}}, :method-params [(keys)]}, pr-with-opts {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/pr-with-opts, :meta {}, :method-params ([objs opts])}, PersistentTreeMap {:name cljs.core/PersistentTreeMap, :meta {}}, strip-ns {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/strip-ns, :meta {}, :method-params ([named])}, ->PersistentTreeMap {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->PersistentTreeMap, :meta {}, :method-params ([comp tree cnt meta __hash])}, array-reduce {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/array-reduce, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([arr f] [arr f val] [arr f val idx]), :arglists ([arr f] [arr f val] [arr f val idx]), :arglists-meta (nil nil nil)}}, :method-params ([arr f] [arr f val] [arr f val idx])}, counted? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/counted?, :meta {}, :method-params ([x])}, tagged-literal {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/tagged-literal, :meta {}, :method-params ([tag form])}, println {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/println, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :method-params [(objs)]}, assoc-in {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/assoc-in, :meta {}, :method-params ([m p__11206 v])}, PersistentHashSet {:name cljs.core/PersistentHashSet, :meta {}}, bit-test {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bit-test, :meta {}, :method-params ([x n])}, ->Namespace {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->Namespace, :meta {}, :method-params ([obj name])}, TransientHashMap {:name cljs.core/TransientHashMap, :meta {}}, ->PersistentHashMap {:variadic false, :protocol-impl nil, :max-fixed-arity 6, :fn-var true, :name cljs.core/->PersistentHashMap, :meta {}, :method-params ([meta cnt root has-nil? nil-val __hash])}, array-extend-kv {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/array-extend-kv, :meta {}, :method-params ([arr k v])}, ISwap {:name cljs.core/ISwap, :meta {}}, ChunkedCons {:name cljs.core/ChunkedCons, :meta {}}, memoize {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/memoize, :meta {}, :method-params ([f])}, alter-meta! {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/alter-meta!, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(iref f args)], :arglists ([iref f & args]), :arglists-meta (nil)}}, :method-params [(iref f args)]}, ->StringBufferWriter {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->StringBufferWriter, :meta {}, :method-params ([sb])}, zero? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/zero?, :meta {}, :method-params ([x])}, tv-ensure-editable {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/tv-ensure-editable, :meta {}, :method-params ([edit node])}, simple-keyword? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/simple-keyword?, :meta {}, :method-params ([x])}, -indexOf {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-indexOf, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll x] [coll x start]), :arglists ([coll x] [coll x start]), :arglists-meta (nil nil)}}, :method-params ([coll x] [coll x start])}, *main-cli-fn* {:name cljs.core/*main-cli-fn*, :meta {}}, -assoc-n {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-assoc-n, :meta {}, :method-params ([coll n val])}, unchecked-dec-int {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-dec-int, :meta {}, :method-params ([x])}, hash-imap {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/hash-imap, :meta {}, :method-params ([m])}, dominates {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/dominates, :meta {}, :method-params ([x y prefer-table hierarchy])}, persistent! {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/persistent!, :meta {}, :method-params ([tcoll])}, set-print-fn! {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/set-print-fn!, :meta {}, :method-params ([f])}, nnext {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/nnext, :meta {}, :method-params ([coll])}, Box {:name cljs.core/Box, :meta {}}, balance-right {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/balance-right, :meta {}, :method-params ([key val left ins])}, throw-no-method-error {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/throw-no-method-error, :meta {}, :method-params ([name dispatch-val])}, demunge-str {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/demunge-str, :meta {}, :method-params ([munged-name])}, add-watch {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/add-watch, :meta {}, :method-params ([iref key f])}, not-every? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/not-every?, :meta {}, :method-params ([pred coll])}, rem {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/rem, :meta {}, :method-params ([n d])}, ifind? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/ifind?, :meta {}, :method-params ([x])}, pr-sb-with-opts {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/pr-sb-with-opts, :meta {}, :method-params ([objs opts])}, ->HashMapIter {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->HashMapIter, :meta {}, :method-params ([nil-val root-iter seen])}, BitmapIndexedNode {:name cljs.core/BitmapIndexedNode, :meta {}}, ->NodeSeq {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->NodeSeq, :meta {}, :method-params ([meta nodes i s __hash])}, some {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/some, :meta {}, :method-params ([pred coll])}, INamed {:name cljs.core/INamed, :meta {}}, ->Box {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->Box, :meta {}, :method-params ([val])}, IReduce {:name cljs.core/IReduce, :meta {}}, neg-int? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/neg-int?, :meta {}, :method-params ([x])}, drop {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/drop, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}}, :method-params ([n] [n coll])}, NodeIterator {:name cljs.core/NodeIterator, :meta {}}, js-obj {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/js-obj, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params ([]), :arglists ([] [& keyvals]), :arglists-meta (nil nil)}}, :method-params ([])}, ITransientCollection {:name cljs.core/ITransientCollection, :meta {}}, Atom {:name cljs.core/Atom, :meta {}}, nth {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/nth, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll n] [coll n not-found]), :arglists ([coll n] [coll n not-found]), :arglists-meta (nil nil)}}, :method-params ([coll n] [coll n not-found])}, sorted? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/sorted?, :meta {}, :method-params ([x])}, nil? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/nil?, :meta {}, :method-params ([x])}, split-at {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/split-at, :meta {}, :method-params ([n coll])}, TransientHashSet {:name cljs.core/TransientHashSet, :meta {}}, *e {:name cljs.core/*e, :meta {}}, array-map-extend-kv {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/array-map-extend-kv, :meta {}, :method-params ([m k v])}, prn-str-with-opts {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/prn-str-with-opts, :meta {}, :method-params ([objs opts])}, not-native {:name cljs.core/not-native, :meta {}}, random-sample {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/random-sample, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([prob] [prob coll]), :arglists ([prob] [prob coll]), :arglists-meta (nil nil)}}, :method-params ([prob] [prob coll])}, select-keys {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/select-keys, :meta {}, :method-params ([map keyseq])}, bit-and {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bit-and, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}}, :method-params ([x y])}, bounded-count {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bounded-count, :meta {}, :method-params ([n coll])}, update {:variadic true, :protocol-impl nil, :max-fixed-arity 6, :fn-var true, :name cljs.core/update, :meta {:top-fn {:variadic true, :max-fixed-arity 6, :method-params ([m k f] [m k f x] [m k f x y] [m k f x y z]), :arglists ([m k f] [m k f x] [m k f x y] [m k f x y z] [m k f x y z & more]), :arglists-meta (nil nil nil nil nil)}}, :method-params ([m k f] [m k f x] [m k f x y] [m k f x y z])}, gensym_counter {:name cljs.core/gensym_counter, :meta {}}, find-macros-ns {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/find-macros-ns, :meta {}, :method-params ([ns])}, list* {:variadic true, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/list*, :meta {:top-fn {:variadic true, :max-fixed-arity 4, :method-params ([args] [a args] [a b args] [a b c args]), :arglists ([args] [a args] [a b args] [a b c args] [a b c d & more]), :arglists-meta (nil nil nil nil nil)}}, :method-params ([args] [a args] [a b args] [a b c args])}, array-index-of-keyword? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/array-index-of-keyword?, :meta {}, :method-params ([arr k])}, ->Keyword {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/->Keyword, :meta {}, :method-params ([ns name fqn _hash])}, t_cljs$core9191 {:name cljs.core/t_cljs$core9191, :meta {}}, update-in {:variadic true, :protocol-impl nil, :max-fixed-arity 6, :fn-var true, :name cljs.core/update-in, :meta {:top-fn {:variadic true, :max-fixed-arity 6, :method-params ([m [k & ks] f] [m [k & ks] f a] [m [k & ks] f a b] [m [k & ks] f a b c]), :arglists ([m [k & ks] f] [m [k & ks] f a] [m [k & ks] f a b] [m [k & ks] f a b c] [m [k & ks] f a b c & args]), :arglists-meta (nil nil nil nil nil)}}, :method-params ([m [k & ks] f] [m [k & ks] f a] [m [k & ks] f a b] [m [k & ks] f a b c])}, prefer-method {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/prefer-method, :meta {}, :method-params ([multifn dispatch-val-x dispatch-val-y])}, hash-symbol {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/hash-symbol, :meta {}, :method-params ([sym])}, ensure-reduced {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/ensure-reduced, :meta {}, :method-params ([x])}, edit-and-set {:variadic false, :protocol-impl nil, :max-fixed-arity 6, :fn-var true, :name cljs.core/edit-and-set, :meta {:top-fn {:variadic false, :max-fixed-arity 6, :method-params ([inode edit i a] [inode edit i a j b]), :arglists ([inode edit i a] [inode edit i a j b]), :arglists-meta (nil nil)}}, :method-params ([inode edit i a] [inode edit i a j b])}, ->PersistentArrayMap {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/->PersistentArrayMap, :meta {}, :method-params ([meta cnt arr __hash])}, instance? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/instance?, :meta {}, :method-params ([c x])}, mix-collection-hash {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/mix-collection-hash, :meta {}, :method-params ([hash-basis count])}, re-find {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/re-find, :meta {}, :method-params ([re s])}, run! {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/run!, :meta {}, :method-params ([proc coll])}, char-escapes {:name cljs.core/char-escapes, :meta {}}, ES6Iterator {:name cljs.core/ES6Iterator, :meta {}}, val {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/val, :meta {}, :method-params ([map-entry])}, unchecked-add {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/unchecked-add, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :method-params ([] [x] [x y])}, transformer-iterator {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/transformer-iterator, :meta {}, :method-params ([xform sourceIter multi])}, not {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/not, :meta {}, :method-params ([x])}, -vreset! {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-vreset!, :meta {}, :method-params ([o new-value])}, fn->comparator {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/fn->comparator, :meta {}, :method-params ([f])}, with-meta {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/with-meta, :meta {}, :method-params ([o meta])}, unreduced {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unreduced, :meta {}, :method-params ([x])}, record? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/record?, :meta {}, :method-params ([x])}, type {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/type, :meta {}, :method-params ([x])}, identical? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/identical?, :meta {}, :method-params ([x y])}, -namespace {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-namespace, :meta {}, :method-params ([x])}, unchecked-divide-int {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/unchecked-divide-int, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, ns-name {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/ns-name, :meta {}, :method-params ([ns-obj])}, swap-global-hierarchy! {:variadic true, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/swap-global-hierarchy!, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}}, :method-params [(f args)]}, max-key {:variadic true, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/max-key, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params ([k x] [k x y]), :arglists ([k x] [k x y] [k x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([k x] [k x y])}, ->PersistentTreeSet {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->PersistentTreeSet, :meta {}, :method-params ([meta tree-map __hash])}, *out* {:name cljs.core/*out*, :meta {}}, ->ChunkBuffer {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->ChunkBuffer, :meta {}, :method-params ([buf end])}, hash-string {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/hash-string, :meta {}, :method-params ([k])}, ValSeq {:name cljs.core/ValSeq, :meta {}}, -prefers {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-prefers, :meta {}, :method-params ([mf])}, set-validator! {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/set-validator!, :meta {}, :method-params ([iref val])}, ident? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/ident?, :meta {}, :method-params ([x])}, -meta {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-meta, :meta {}, :method-params ([o])}, RedNode {:name cljs.core/RedNode, :meta {}}, -dispatch-fn {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-dispatch-fn, :meta {}, :method-params ([mf])}, ->IndexedSeqIterator {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->IndexedSeqIterator, :meta {}, :method-params ([arr i])}, -add-method {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-add-method, :meta {}, :method-params ([mf dispatch-val method])}, balance-left-del {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/balance-left-del, :meta {}, :method-params ([key val del right])}, swap! {:variadic true, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/swap!, :meta {:top-fn {:variadic true, :max-fixed-arity 4, :method-params ([a f] [a f x] [a f x y]), :arglists ([a f] [a f x] [a f x y] [a f x y & more]), :arglists-meta (nil nil nil nil)}}, :method-params ([a f] [a f x] [a f x y])}, vals {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/vals, :meta {}, :method-params ([hash-map])}, Repeat {:name cljs.core/Repeat, :meta {}}, -chunked-next {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-chunked-next, :meta {}, :method-params ([coll])}, Single {:name cljs.core/Single, :meta {}}, unchecked-subtract {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/unchecked-subtract, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, tap> {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/tap>, :meta {}, :method-params ([x])}, remove-pair {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/remove-pair, :meta {}, :method-params ([arr i])}, IMap {:name cljs.core/IMap, :meta {}}, ->SeqIter {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->SeqIter, :meta {}, :method-params ([_seq _next])}, sorted-set-by {:variadic true, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/sorted-set-by, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(comparator keys)], :arglists ([comparator & keys]), :arglists-meta (nil)}}, :method-params [(comparator keys)]}, PersistentVector {:name cljs.core/PersistentVector, :meta {}}, cloneable? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/cloneable?, :meta {}, :method-params ([value])}, qualified-ident? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/qualified-ident?, :meta {}, :method-params ([x])}, hash-string* {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/hash-string*, :meta {}, :method-params ([s])}, key-test {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/key-test, :meta {}, :method-params ([key other])}, -reset {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-reset, :meta {}, :method-params ([mf])}, true? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/true?, :meta {}, :method-params ([x])}, find-ns-obj* {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/find-ns-obj*, :meta {}, :method-params ([ctxt xs])}, array {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/array, :meta {}, :method-params ([var-args])}, print {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/print, :meta {}, :method-params ([objs])}, -peek {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-peek, :meta {}, :method-params ([coll])}, ISeq {:name cljs.core/ISeq, :meta {}}, empty {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/empty, :meta {}, :method-params ([coll])}, remove-method {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/remove-method, :meta {}, :method-params ([multifn dispatch-val])}, PersistentQueueSeq {:name cljs.core/PersistentQueueSeq, :meta {}}, balance-right-del {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/balance-right-del, :meta {}, :method-params ([key val left del])}, volatile! {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/volatile!, :meta {}, :method-params ([val])}, / {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core//, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, bitpos {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bitpos, :meta {}, :method-params ([hash shift])}, Many {:name cljs.core/Many, :meta {}}, bit-or {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bit-or, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}}, :method-params ([x y])}, m3-fmix {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/m3-fmix, :meta {}, :method-params ([h1 len])}, vector {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/vector, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :method-params [(args)]}, hash-coll {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/hash-coll, :meta {}, :method-params ([coll])}, clone-and-set {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/clone-and-set, :meta {:top-fn {:variadic false, :max-fixed-arity 5, :method-params ([arr i a] [arr i a j b]), :arglists ([arr i a] [arr i a j b]), :arglists-meta (nil nil)}}, :method-params ([arr i a] [arr i a j b])}, array->transient-hash-map {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/array->transient-hash-map, :meta {}, :method-params ([len arr])}, >= {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/>=, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, ->TransientHashSet {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->TransientHashSet, :meta {}, :method-params ([transient-map])}, drop-last {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/drop-last, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [n s]), :arglists ([s] [n s]), :arglists-meta (nil nil)}}, :method-params ([s] [n s])}, ->ArrayIter {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->ArrayIter, :meta {}, :method-params ([arr i])}, object? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/object?, :meta {}, :method-params ([x])}, ->ArrayNodeSeq {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->ArrayNodeSeq, :meta {}, :method-params ([meta nodes i s __hash])}, lift-ns {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/lift-ns, :meta {}, :method-params ([m])}, tree-map-append {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/tree-map-append, :meta {}, :method-params ([left right])}, not-empty {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/not-empty, :meta {}, :method-params ([coll])}, distinct {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/distinct, :meta {:top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [coll]), :arglists ([] [coll]), :arglists-meta (nil nil)}}, :method-params ([] [coll])}, partition {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/partition, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([n coll] [n step coll] [n step pad coll]), :arglists ([n coll] [n step coll] [n step pad coll]), :arglists-meta (nil nil nil)}}, :method-params ([n coll] [n step coll] [n step pad coll])}, IMultiFn {:name cljs.core/IMultiFn, :meta {}}, ->Many {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->Many, :meta {}, :method-params ([vals])}, DEMUNGE_PATTERN {:name cljs.core/DEMUNGE_PATTERN, :meta {}}, fix {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/fix, :meta {}, :method-params ([q])}, EmptyList {:name cljs.core/EmptyList, :meta {}}, HashMapIter {:name cljs.core/HashMapIter, :meta {}}, IAssociative {:name cljs.core/IAssociative, :meta {}}, ->Single {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->Single, :meta {}, :method-params ([val])}, bit-flip {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bit-flip, :meta {}, :method-params ([x n])}, long-array {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/long-array, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size-or-seq] [size init-val-or-seq]), :arglists ([size-or-seq] [size init-val-or-seq]), :arglists-meta (nil nil)}}, :method-params ([size-or-seq] [size init-val-or-seq])}, descendants {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/descendants, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([tag] [h tag]), :arglists ([tag] [h tag]), :arglists-meta (nil nil)}}, :method-params ([tag] [h tag])}, imul {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/imul, :meta {}, :method-params ([a b])}, ->Delay {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->Delay, :meta {}, :method-params ([f value])}, array-for {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/array-for, :meta {}, :method-params ([pv i])}, merge {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/merge, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :method-params [(maps)]}, ISeqable {:name cljs.core/ISeqable, :meta {}}, Empty {:name cljs.core/Empty, :meta {}}, js-mod {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/js-mod, :meta {}, :method-params ([n d])}, integer? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/integer?, :meta {}, :method-params ([n])}, MetaFn {:name cljs.core/MetaFn, :meta {}}, NS_CACHE {:name cljs.core/NS_CACHE, :meta {}}, mapv {:variadic true, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/mapv, :meta {:top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f coll] [f c1 c2] [f c1 c2 c3]), :arglists ([f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls]), :arglists-meta (nil nil nil nil)}}, :method-params ([f coll] [f c1 c2] [f c1 c2 c3])}, infinite? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/infinite?, :meta {}, :method-params ([x])}, partition-all {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/partition-all, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n] [n coll] [n step coll]), :arglists ([n] [n coll] [n step coll]), :arglists-meta (nil nil nil)}}, :method-params ([n] [n coll] [n step coll])}, partition-by {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/partition-by, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}}, :method-params ([f] [f coll])}, ISequential {:name cljs.core/ISequential, :meta {}}, ->LazySeq {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/->LazySeq, :meta {}, :method-params ([meta fn s __hash])}, equiv-map {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/equiv-map, :meta {}, :method-params ([x y])}, ->Volatile {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->Volatile, :meta {}, :method-params ([state])}, object-array {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/object-array, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size-or-seq] [size init-val-or-seq]), :arglists ([size-or-seq] [size init-val-or-seq]), :arglists-meta (nil nil)}}, :method-params ([size-or-seq] [size init-val-or-seq])}, Keyword {:name cljs.core/Keyword, :meta {}}, derive {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/derive, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([tag parent] [h tag parent]), :arglists ([tag parent] [h tag parent]), :arglists-meta (nil nil)}}, :method-params ([tag parent] [h tag parent])}, seq-iter {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/seq-iter, :meta {}, :method-params ([coll])}, ->Empty {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/->Empty, :meta {}, :method-params ([])}, IChunkedSeq {:name cljs.core/IChunkedSeq, :meta {}}, special-symbol? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/special-symbol?, :meta {}, :method-params ([x])}, compare-keywords {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/compare-keywords, :meta {}, :method-params ([a b])}, ancestors {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/ancestors, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([tag] [h tag]), :arglists ([tag] [h tag]), :arglists-meta (nil nil)}}, :method-params ([tag] [h tag])}, subseq {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/subseq, :meta {:top-fn {:variadic false, :max-fixed-arity 5, :method-params ([sc test key] [sc start-test start-key end-test end-key]), :arglists ([sc test key] [sc start-test start-key end-test end-key]), :arglists-meta (nil nil)}}, :method-params ([sc test key] [sc start-test start-key end-test end-key])}, gensym {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/gensym, :meta {:top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [prefix-string]), :arglists ([] [prefix-string]), :arglists-meta (nil nil)}}, :method-params ([] [prefix-string])}, -next {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-next, :meta {}, :method-params ([coll])}, ->HashCollisionNode {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/->HashCollisionNode, :meta {}, :method-params ([edit collision-hash cnt arr])}, delay? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/delay?, :meta {}, :method-params ([x])}, create-inode-seq {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/create-inode-seq, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([nodes] [nodes i s]), :arglists ([nodes] [nodes i s]), :arglists-meta (nil nil)}}, :method-params ([nodes] [nodes i s])}, flatten {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/flatten, :meta {}, :method-params ([x])}, -dissoc {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-dissoc, :meta {}, :method-params ([coll k])}, doubles {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/doubles, :meta {}, :method-params ([x])}, halt-when {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/halt-when, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred retf]), :arglists ([pred] [pred retf]), :arglists-meta (nil nil)}}, :method-params ([pred] [pred retf])}, -contains-key? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-contains-key?, :meta {}, :method-params ([coll k])}, remove-watch {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/remove-watch, :meta {}, :method-params ([iref key])}, ex-info {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/ex-info, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([msg data] [msg data cause]), :arglists ([msg data] [msg data cause]), :arglists-meta (nil nil)}}, :method-params ([msg data] [msg data cause])}, ifn? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/ifn?, :meta {}, :method-params ([f])}, IAtom {:name cljs.core/IAtom, :meta {}}, ->PersistentQueue {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->PersistentQueue, :meta {}, :method-params ([meta count front rear __hash])}, nat-int? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/nat-int?, :meta {}, :method-params ([x])}, IWatchable {:name cljs.core/IWatchable, :meta {}}, pv-fresh-node {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/pv-fresh-node, :meta {}, :method-params ([edit])}, subvec {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/subvec, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v start] [v start end]), :arglists ([v start] [v start end]), :arglists-meta (nil nil)}}, :method-params ([v start] [v start end])}, -pop! {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-pop!, :meta {}, :method-params ([tcoll])}, partial {:variadic true, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/partial, :meta {:top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f] [f arg1] [f arg1 arg2] [f arg1 arg2 arg3]), :arglists ([f] [f arg1] [f arg1 arg2] [f arg1 arg2 arg3] [f arg1 arg2 arg3 & more]), :arglists-meta (nil nil nil nil nil)}}, :method-params ([f] [f arg1] [f arg1 arg2] [f arg1 arg2 arg3])}, chunked-seq? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/chunked-seq?, :meta {}, :method-params ([x])}, replicate {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/replicate, :meta {}, :method-params ([n x])}, PersistentQueue {:name cljs.core/PersistentQueue, :meta {}}, min-key {:variadic true, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/min-key, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params ([k x] [k x y]), :arglists ([k x] [k x y] [k x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([k x] [k x y])}, hash-iset {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/hash-iset, :meta {}, :method-params ([s])}, reduced {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/reduced, :meta {}, :method-params ([x])}, re-matches {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/re-matches, :meta {}, :method-params ([re s])}, pr-writer-impl {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/pr-writer-impl, :meta {}, :method-params ([obj writer opts])}, array-map {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/array-map, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keyvals)], :arglists ([& keyvals]), :arglists-meta (nil)}}, :method-params [(keyvals)]}, ITransientSet {:name cljs.core/ITransientSet, :meta {}}, ITER_SYMBOL {:name cljs.core/ITER_SYMBOL, :meta {}}, unchecked-byte {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-byte, :meta {}, :method-params ([x])}, checked-aset {:variadic true, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/checked-aset, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params ([array idx val]), :arglists ([array idx val] [array idx idx2 & idxv]), :arglists-meta (nil nil)}}, :method-params ([array idx val])}, ArrayNode {:name cljs.core/ArrayNode, :meta {}}, ->ChunkedSeq {:variadic false, :protocol-impl nil, :max-fixed-arity 6, :fn-var true, :name cljs.core/->ChunkedSeq, :meta {}, :method-params ([vec node i off meta __hash])}, every-pred {:variadic true, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/every-pred, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params ([p] [p1 p2] [p1 p2 p3]), :arglists ([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 & ps]), :arglists-meta (nil nil nil nil)}}, :method-params ([p] [p1 p2] [p1 p2 p3])}, keys {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/keys, :meta {}, :method-params ([hash-map])}, missing-protocol {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/missing-protocol, :meta {}, :method-params ([proto obj])}, load-file {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/load-file, :meta {}, :method-params ([file])}, PersistentArrayMap {:name cljs.core/PersistentArrayMap, :meta {}}, distinct? {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/distinct?, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, pos-int? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/pos-int?, :meta {}, :method-params ([x])}, never-equiv {:name cljs.core/never-equiv, :meta {}}, unchecked-short {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-short, :meta {}, :method-params ([x])}, ->Range {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->Range, :meta {}, :method-params ([meta start end step __hash])}, ->MapEntry {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->MapEntry, :meta {}, :method-params ([key val __hash])}, apply-to-simple {:variadic false, :protocol-impl nil, :max-fixed-arity 6, :fn-var true, :name cljs.core/apply-to-simple, :meta {:top-fn {:variadic false, :max-fixed-arity 6, :method-params ([f args] [f a0 args] [f a0 a1 args] [f a0 a1 a2 args] [f a0 a1 a2 a3 args]), :arglists ([f args] [f a0 args] [f a0 a1 args] [f a0 a1 a2 args] [f a0 a1 a2 a3 args]), :arglists-meta (nil nil nil nil nil)}}, :method-params ([f args] [f a0 args] [f a0 a1 args] [f a0 a1 a2 args] [f a0 a1 a2 a3 args])}, methods {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/methods, :meta {}, :method-params ([multifn])}, odd? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/odd?, :meta {}, :method-params ([n])}, ->ArrayChunk {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->ArrayChunk, :meta {}, :method-params ([arr off end])}, ci-reduce {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/ci-reduce, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([cicoll f] [cicoll f val] [cicoll f val idx]), :arglists ([cicoll f] [cicoll f val] [cicoll f val idx]), :arglists-meta (nil nil nil)}}, :method-params ([cicoll f] [cicoll f val] [cicoll f val idx])}, *3 {:name cljs.core/*3, :meta {}}, -get-method {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-get-method, :meta {}, :method-params ([mf dispatch-val])}, ->Var {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->Var, :meta {}, :method-params ([val sym _meta])}, frequencies {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/frequencies, :meta {}, :method-params ([coll])}, reduceable? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/reduceable?, :meta {}, :method-params ([x])}, string-hash-cache {:name cljs.core/string-hash-cache, :meta {}}, ->Iterate {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->Iterate, :meta {}, :method-params ([meta f prev-seed seed next])}, rsubseq {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/rsubseq, :meta {:top-fn {:variadic false, :max-fixed-arity 5, :method-params ([sc test key] [sc start-test start-key end-test end-key]), :arglists ([sc test key] [sc start-test start-key end-test end-key]), :arglists-meta (nil nil)}}, :method-params ([sc test key] [sc start-test start-key end-test end-key])}, inc {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/inc, :meta {}, :method-params ([x])}, type->str {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/type->str, :meta {}, :method-params ([ty])}, obj-clone {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/obj-clone, :meta {}, :method-params ([obj ks])}, get-method {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/get-method, :meta {}, :method-params ([multifn dispatch-val])}, uuid? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/uuid?, :meta {}, :method-params ([x])}, vector-index-out-of-bounds {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/vector-index-out-of-bounds, :meta {}, :method-params ([i cnt])}, es6-entries-iterator {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/es6-entries-iterator, :meta {}, :method-params ([coll])}, bit-clear {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/bit-clear, :meta {}, :method-params ([x n])}, Range {:name cljs.core/Range, :meta {}}, filter {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/filter, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}}, :method-params ([pred] [pred coll])}, ->PersistentTreeMapSeq {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->PersistentTreeMapSeq, :meta {}, :method-params ([meta stack ascending? cnt __hash])}, create-array-node-seq {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/create-array-node-seq, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([nodes] [meta nodes i s]), :arglists ([nodes] [meta nodes i s]), :arglists-meta (nil nil)}}, :method-params ([nodes] [meta nodes i s])}, -assoc-n! {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-assoc-n!, :meta {}, :method-params ([tcoll n val])}, IWithMeta {:name cljs.core/IWithMeta, :meta {}}, list {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/list, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :method-params [(xs)]}, + {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/+, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :method-params ([] [x] [x y])}, IndexedSeqIterator {:name cljs.core/IndexedSeqIterator, :meta {}}, split-with {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/split-with, :meta {}, :method-params ([pred coll])}, ->VectorNode {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/->VectorNode, :meta {}, :method-params ([edit arr])}, aset {:variadic true, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/aset, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params ([array idx val]), :arglists ([array idx val] [array idx idx2 & idxv]), :arglists-meta (nil nil)}}, :method-params ([array idx val])}, int-rotate-left {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/int-rotate-left, :meta {}, :method-params ([x n])}, keyword {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/keyword, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([name] [ns name]), :arglists ([name] [ns name]), :arglists-meta (nil nil)}}, :method-params ([name] [ns name])}, ->Cons {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/->Cons, :meta {}, :method-params ([meta first rest __hash])}, *ns* {:name cljs.core/*ns*, :meta {}}, *assert* {:name cljs.core/*assert*, :meta {}}, create-tree-map-seq {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/create-tree-map-seq, :meta {}, :method-params ([tree ascending? cnt])}, ICollection {:name cljs.core/ICollection, :meta {}}, chars {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/chars, :meta {}, :method-params ([x])}, str {:variadic true, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/str, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params ([] [x]), :arglists ([] [x] [x & ys]), :arglists-meta (nil nil nil)}}, :method-params ([] [x])}, next {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/next, :meta {}, :method-params ([coll])}, ASeq {:name cljs.core/ASeq, :meta {}}, pr-seq-writer {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/pr-seq-writer, :meta {}, :method-params ([objs writer opts])}, SeqIter {:name cljs.core/SeqIter, :meta {}}, IFn {:name cljs.core/IFn, :meta {}}, regexp? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/regexp?, :meta {}, :method-params ([x])}, hash-map {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/hash-map, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keyvals)], :arglists ([& keyvals]), :arglists-meta (nil)}}, :method-params [(keyvals)]}, *exec-tap-fn* {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/*exec-tap-fn*, :meta {}, :method-params ([f])}, underive {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/underive, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([tag parent] [h tag parent]), :arglists ([tag parent] [h tag parent]), :arglists-meta (nil nil)}}, :method-params ([tag parent] [h tag parent])}, array-copy {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/array-copy, :meta {}, :method-params ([from i to j len])}, obj-map-compare-keys {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/obj-map-compare-keys, :meta {}, :method-params ([a b])}, -reset! {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-reset!, :meta {}, :method-params ([o new-value])}, -rest {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-rest, :meta {}, :method-params ([coll])}, nil-iter {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/nil-iter, :meta {}, :method-params ([])}, pr-writer {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/pr-writer, :meta {}, :method-params ([obj writer opts])}, false? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/false?, :meta {}, :method-params ([x])}, RangedIterator {:name cljs.core/RangedIterator, :meta {}}, *print-readably* {:name cljs.core/*print-readably*, :meta {}}, ints {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/ints, :meta {}, :method-params ([x])}, some-fn {:variadic true, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/some-fn, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params ([p] [p1 p2] [p1 p2 p3]), :arglists ([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 & ps]), :arglists-meta (nil nil nil nil)}}, :method-params ([p] [p1 p2] [p1 p2 p3])}, demunge-pattern {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/demunge-pattern, :meta {}, :method-params ([])}, maybe-enable-print! {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/maybe-enable-print!, :meta {}, :method-params ([])}, *flush-on-newline* {:name cljs.core/*flush-on-newline*, :meta {}}, to-array {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/to-array, :meta {}, :method-params ([s])}, build-subvec {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/build-subvec, :meta {}, :method-params ([meta v start end __hash])}, maybe-warn {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/maybe-warn, :meta {}, :method-params ([e])}, Namespace {:name cljs.core/Namespace, :meta {}}, list? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/list?, :meta {}, :method-params ([x])}, tree-map-remove {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/tree-map-remove, :meta {}, :method-params ([comp tree k found])}, PersistentQueueIter {:name cljs.core/PersistentQueueIter, :meta {}}, HashCollisionNode {:name cljs.core/HashCollisionNode, :meta {}}, array? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/array?, :meta {}, :method-params ([x])}, prefers* {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/prefers*, :meta {}, :method-params ([x y prefer-table])}, simple-ident? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/simple-ident?, :meta {}, :method-params ([x])}, clone {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/clone, :meta {}, :method-params ([value])}, scan-array {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/scan-array, :meta {}, :method-params ([incr k array])}, demunge {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/demunge, :meta {}, :method-params ([name])}, bit-not {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/bit-not, :meta {}, :method-params ([x])}, quote-string {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/quote-string, :meta {}, :method-params ([s])}, byte {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/byte, :meta {}, :method-params ([x])}, max {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/max, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, ->Repeat {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->Repeat, :meta {}, :method-params ([meta count val next __hash])}, IComparable {:name cljs.core/IComparable, :meta {}}, == {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/==, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :method-params ([x] [x y])}, ->t_cljs$core9191 {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->t_cljs$core9191, :meta {}, :method-params ([meta9192])}, parents {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/parents, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([tag] [h tag]), :arglists ([tag] [h tag]), :arglists-meta (nil nil)}}, :method-params ([tag] [h tag])}, count {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/count, :meta {}, :method-params ([coll])}, -disjoin! {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-disjoin!, :meta {}, :method-params ([tcoll v])}, *loaded-libs* {:name cljs.core/*loaded-libs*, :meta {}}, EMPTY {:name cljs.core/EMPTY, :meta {}}, ->TransientHashMap {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->TransientHashMap, :meta {}, :method-params ([edit root count has-nil? nil-val])}, array-index-of-symbol? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/array-index-of-symbol?, :meta {}, :method-params ([arr k])}, ArrayChunk {:name cljs.core/ArrayChunk, :meta {}}, sorted-map-by {:variadic true, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/sorted-map-by, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(comparator keyvals)], :arglists ([comparator & keyvals]), :arglists-meta (nil)}}, :method-params [(comparator keyvals)]}, apply {:variadic true, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/apply, :meta {:top-fn {:variadic true, :max-fixed-arity 5, :method-params ([f args] [f x args] [f x y args] [f x y z args]), :arglists ([f args] [f x args] [f x y args] [f x y z args] [f a b c d & args]), :arglists-meta (nil nil nil nil nil)}}, :method-params ([f args] [f x args] [f x y args] [f x y z args])}, get-global-hierarchy {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/get-global-hierarchy, :meta {}, :method-params ([])}, add-to-string-hash-cache {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/add-to-string-hash-cache, :meta {}, :method-params ([k])}, clj->js {:variadic true, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/clj->js, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(x {:keys [keyword-fn], :or {keyword-fn name}, :as options})], :arglists ([x & {:keys [keyword-fn], :or {keyword-fn name}, :as options}]), :arglists-meta (nil)}}, :method-params [(x {:keys [keyword-fn], :or {keyword-fn name}, :as options})]}, TransientArrayMap {:name cljs.core/TransientArrayMap, :meta {}}, ->TransientVector {:variadic false, :protocol-impl nil, :max-fixed-arity 4, :fn-var true, :name cljs.core/->TransientVector, :meta {}, :method-params ([cnt shift root tail])}, IChunkedNext {:name cljs.core/IChunkedNext, :meta {}}, interpose {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/interpose, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([sep] [sep coll]), :arglists ([sep] [sep coll]), :arglists-meta (nil nil)}}, :method-params ([sep] [sep coll])}, TransformerIterator {:name cljs.core/TransformerIterator, :meta {}}, ->BlackNode {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->BlackNode, :meta {}, :method-params ([key val left right __hash])}, deref {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/deref, :meta {}, :method-params ([o])}, pv-aget {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/pv-aget, :meta {}, :method-params ([node idx])}, assoc {:variadic true, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/assoc, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params ([coll k v]), :arglists ([coll k v] [coll k v & kvs]), :arglists-meta (nil nil)}}, :method-params ([coll k v])}, transient {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/transient, :meta {}, :method-params ([coll])}, -disjoin {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-disjoin, :meta {}, :method-params ([coll v])}, chunk-cons {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/chunk-cons, :meta {}, :method-params ([chunk rest])}, ArrayIter {:name cljs.core/ArrayIter, :meta {}}, comparator {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/comparator, :meta {}, :method-params ([pred])}, print-prefix-map {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/print-prefix-map, :meta {}, :method-params ([prefix m print-one writer opts])}, sorted-map {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/sorted-map, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keyvals)], :arglists ([& keyvals]), :arglists-meta (nil)}}, :method-params [(keyvals)]}, drop-while {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/drop-while, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}}, :method-params ([pred] [pred coll])}, IWriter {:name cljs.core/IWriter, :meta {}}, KeySeq {:name cljs.core/KeySeq, :meta {}}, realized? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/realized?, :meta {}, :method-params ([x])}, *print-fn* {:name cljs.core/*print-fn*, :meta {}}, compare {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/compare, :meta {}, :method-params ([x y])}, complement {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/complement, :meta {}, :method-params ([f])}, lookup-sentinel {:name cljs.core/lookup-sentinel, :meta {}}, -assoc! {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-assoc!, :meta {}, :method-params ([tcoll key val])}, *print-dup* {:name cljs.core/*print-dup*, :meta {}}, string-iter {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/string-iter, :meta {}, :method-params ([x])}, -key->js {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-key->js, :meta {}, :method-params ([x])}, IDeref {:name cljs.core/IDeref, :meta {}}, sequence {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/sequence, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([coll] [xform coll]), :arglists ([coll] [xform coll] [xform coll & colls]), :arglists-meta (nil nil nil)}}, :method-params ([coll] [xform coll])}, constantly {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/constantly, :meta {}, :method-params ([x])}, ->RangedIterator {:variadic false, :protocol-impl nil, :max-fixed-arity 6, :fn-var true, :name cljs.core/->RangedIterator, :meta {}, :method-params ([i base arr v start end])}, chunked-seq {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/chunked-seq, :meta {:top-fn {:variadic false, :max-fixed-arity 5, :method-params ([vec i off] [vec node i off] [vec node i off meta]), :arglists ([vec i off] [vec node i off] [vec node i off meta]), :arglists-meta (nil nil nil)}}, :method-params ([vec i off] [vec node i off] [vec node i off meta])}, ISorted {:name cljs.core/ISorted, :meta {}}, make-array {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/make-array, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([size] [type size]), :arglists ([size] [type size] [type size & more-sizes]), :arglists-meta (nil nil nil)}}, :method-params ([size] [type size])}, checked-aget {:variadic true, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/checked-aget, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([array idx]), :arglists ([array idx] [array idx & idxs]), :arglists-meta (nil nil)}}, :method-params ([array idx])}, shorts {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/shorts, :meta {}, :method-params ([x])}, *unchecked-if* {:name cljs.core/*unchecked-if*, :meta {}}, ->RSeq {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->RSeq, :meta {}, :method-params ([ci i meta])}, enable-console-print! {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/enable-console-print!, :meta {}, :method-params ([])}, -flush {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-flush, :meta {}, :method-params ([writer])}, -lastIndexOf {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/-lastIndexOf, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll x] [coll x start]), :arglists ([coll x] [coll x start]), :arglists-meta (nil nil)}}, :method-params ([coll x] [coll x start])}, completing {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/completing, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f cf]), :arglists ([f] [f cf]), :arglists-meta (nil nil)}}, :method-params ([f] [f cf])}, unchecked-negate-int {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-negate-int, :meta {}, :method-params ([x])}, ->PersistentVector {:variadic false, :protocol-impl nil, :max-fixed-arity 6, :fn-var true, :name cljs.core/->PersistentVector, :meta {}, :method-params ([meta cnt shift root tail __hash])}, equiv-sequential {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/equiv-sequential, :meta {}, :method-params ([x y])}, hash-unordered-coll {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/hash-unordered-coll, :meta {}, :method-params ([coll])}, repeat {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/repeat, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [n x]), :arglists ([x] [n x]), :arglists-meta (nil nil)}}, :method-params ([x] [n x])}, unchecked-inc {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-inc, :meta {}, :method-params ([x])}, nthnext {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/nthnext, :meta {}, :method-params ([coll n])}, preserving-reduced {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/preserving-reduced, :meta {}, :method-params ([rf])}, get-validator {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/get-validator, :meta {}, :method-params ([iref])}, StringIter {:name cljs.core/StringIter, :meta {}}, number? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/number?, :meta {}, :method-params ([x])}, -conj! {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-conj!, :meta {}, :method-params ([tcoll val])}, ->PersistentArrayMapSeq {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/->PersistentArrayMapSeq, :meta {}, :method-params ([arr i _meta])}, chunk-next {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/chunk-next, :meta {}, :method-params ([s])}, ArrayList {:name cljs.core/ArrayList, :meta {}}, print-str {:variadic true, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/print-str, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :method-params [(objs)]}, not-any? {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/not-any?, :meta {}, :method-params ([pred coll])}, into-array {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/into-array, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([aseq] [type aseq]), :arglists ([aseq] [type aseq]), :arglists-meta (nil nil)}}, :method-params ([aseq] [type aseq])}, -hash {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-hash, :meta {}, :method-params ([o])}, qualified-symbol? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/qualified-symbol?, :meta {}, :method-params ([x])}, -dissoc! {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/-dissoc!, :meta {}, :method-params ([tcoll key])}, ->Reduced {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/->Reduced, :meta {}, :method-params ([val])}, chunk-buffer {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/chunk-buffer, :meta {}, :method-params ([capacity])}, seqable? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/seqable?, :meta {}, :method-params ([s])}, symbol? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/symbol?, :meta {}, :method-params ([x])}, m3-hash-unencoded-chars {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/m3-hash-unencoded-chars, :meta {}, :method-params ([in])}, unchecked-char {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/unchecked-char, :meta {}, :method-params ([x])}, system-time {:variadic false, :protocol-impl nil, :max-fixed-arity 0, :fn-var true, :name cljs.core/system-time, :meta {}, :method-params ([])}, NeverEquiv {:name cljs.core/NeverEquiv, :meta {}}, chunkIteratorSeq {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/chunkIteratorSeq, :meta {}, :method-params ([iter])}, -invoke {:variadic false, :protocol-impl nil, :max-fixed-arity 22, :fn-var true, :name cljs.core/-invoke, :meta {:top-fn {:variadic false, :max-fixed-arity 22, :method-params ([this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q r] [this a b c d e f g h i j k l m n o p q r s] [this a b c d e f g h i j k l m n o p q r s t] [this a b c d e f g h i j k l m n o p q r s t rest]), :arglists ([this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q r] [this a b c d e f g h i j k l m n o p q r s] [this a b c d e f g h i j k l m n o p q r s t] [this a b c d e f g h i j k l m n o p q r s t rest]), :arglists-meta (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)}}, :method-params ([this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q r] [this a b c d e f g h i j k l m n o p q r s] [this a b c d e f g h i j k l m n o p q r s t] [this a b c d e f g h i j k l m n o p q r s t rest])}, coll? {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/coll?, :meta {}, :method-params ([x])}, get-in {:variadic false, :protocol-impl nil, :max-fixed-arity 3, :fn-var true, :name cljs.core/get-in, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m ks] [m ks not-found]), :arglists ([m ks] [m ks not-found]), :arglists-meta (nil nil)}}, :method-params ([m ks] [m ks not-found])}, fnext {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/fnext, :meta {}, :method-params ([coll])}, IList {:name cljs.core/IList, :meta {}}, ArrayNodeIterator {:name cljs.core/ArrayNodeIterator, :meta {}}, List {:name cljs.core/List, :meta {}}, -val {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-val, :meta {}, :method-params ([coll])}, bytes {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/bytes, :meta {}, :method-params ([x])}, ->ObjMap {:variadic false, :protocol-impl nil, :max-fixed-arity 5, :fn-var true, :name cljs.core/->ObjMap, :meta {}, :method-params ([meta keys strobj update-count __hash])}, compare-symbols {:variadic false, :protocol-impl nil, :max-fixed-arity 2, :fn-var true, :name cljs.core/compare-symbols, :meta {}, :method-params ([a b])}, -seq {:variadic false, :protocol-impl nil, :max-fixed-arity 1, :fn-var true, :name cljs.core/-seq, :meta {}, :method-params ([o])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{form tag & uuid case* end defrecord* base obj fqn first try has-nil? rear hierarchy iter step boolean update-count method-table chunk i rest :meta :dup meta10725 comp dispatch-fn buffer :else left ns* :cljs.core/none shift iters xform :validator finally :default prefer-table loop* watches :ns bitmap _seq nil-val v riter __hash meta _meta afn tree fn front buf next-entry :val key _next root-iter do vec meta9192 :fallback-impl :keyword-fn :flush-on-newline default-dispatch-val :no-test validator letfn* if arr new :descendants ns completed :ancestors value name :readably :more-marker fields method-cache edit editable? base-count collision-hash deftype* let* start sourceIter coll not-native js* strobj _rest fn* val ascending? recur xf ci :print-length state :ok vals all :cljs.core/halt cached-hierarchy s :parents cnt node sym sb seed prev-seed _hash keys set! :tag tree-map . var :mutable quote root multi str next nodes seen hash-map catch :alt-impl ext-map-iter tail record mseq count :keywordize-keys current off stack transient-map prev len right throw fseq :cljs.core/not-found more def f next-iter}, :order [:flush-on-newline :readably :meta :dup :print-length :else sb :default ns name str _hash :mutable _meta val sym s value iter _rest arr i meta ci afn first rest count __hash fqn fn buf end off chunk more meta9192 _seq _next vals iters buffer completed xf sourceIter multi state validator watches :validator all prev current next f prev-seed seed edit base v start cnt shift root tail vec node fseq riter front rear keys strobj update-count record base-count fields ext-map-iter key editable? len next-entry next-iter bitmap collision-hash nodes nil-val root-iter seen has-nil? :tag boolean stack ascending? left right comp tree mseq not-native :cljs.core/not-found hash-map transient-map tree-map step :cljs.core/none :more-marker :alt-impl :fallback-impl :val :cljs.core/halt xform coll :keyword-fn :keywordize-keys :parents :descendants :ancestors dispatch-fn default-dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy uuid & case* defrecord* try ns* finally loop* do letfn* if new deftype* let* js* fn* recur set! . var quote catch throw def :ok :no-test tag form :ns obj meta10725]}, :doc nil}}